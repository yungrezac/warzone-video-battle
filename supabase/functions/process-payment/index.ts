
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface ProcessPaymentRequest {
  user_id: string;
  telegram_payment_charge_id: string;
  telegram_invoice_payload: string;
  subscription_expiration_date?: string;
  is_recurring?: boolean;
  is_first_recurring?: boolean;
}

const serve_handler = async (req: Request): Promise<Response> => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { 
      user_id, 
      telegram_payment_charge_id, 
      telegram_invoice_payload,
      subscription_expiration_date,
      is_recurring = false,
      is_first_recurring = false
    }: ProcessPaymentRequest = await req.json();
    
    console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–¥–ø–∏—Å–æ–∫):', {
      user_id,
      telegram_payment_charge_id,
      telegram_invoice_payload,
      subscription_expiration_date,
      is_recurring,
      is_first_recurring
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase –∫–ª–∏–µ–Ω—Ç
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂
    const { data: existingPayment, error: checkError } = await supabase
      .from('payments')
      .select('id')
      .eq('telegram_payment_charge_id', telegram_payment_charge_id)
      .maybeSingle();

    if (checkError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', checkError);
      throw checkError;
    }

    if (existingPayment) {
      console.log('–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', telegram_payment_charge_id);
      return new Response(
        JSON.stringify({ error: 'Payment already processed' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    let expiresAt: Date;
    if (subscription_expiration_date) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É –∏–∑ Telegram API
      expiresAt = new Date(subscription_expiration_date);
    } else {
      // Fallback: –¥–æ–±–∞–≤–ª—è–µ–º 30 –¥–Ω–µ–π –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
      expiresAt = new Date();
      expiresAt.setDate(expiresAt.getDate() + 30);
    }

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    const { data: subscription, error: subscriptionError } = await supabase
      .from('subscriptions')
      .upsert({
        user_id: user_id,
        subscription_type: 'premium',
        status: 'active',
        starts_at: new Date().toISOString(),
        expires_at: expiresAt.toISOString(),
        telegram_payment_charge_id: telegram_payment_charge_id,
        telegram_invoice_payload: telegram_invoice_payload,
        amount_stars: 1, // –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 1 Star
        updated_at: new Date().toISOString()
      }, {
        onConflict: 'user_id,status', // –û–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        ignoreDuplicates: false
      })
      .select()
      .single();

    if (subscriptionError) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', subscriptionError);
      throw subscriptionError;
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
    const { error: paymentError } = await supabase
      .from('payments')
      .insert({
        user_id: user_id,
        subscription_id: subscription.id,
        telegram_payment_charge_id: telegram_payment_charge_id,
        telegram_invoice_payload: telegram_invoice_payload,
        amount_stars: 1, // –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ 1 Star
        status: 'succeeded',
        processed_at: new Date().toISOString()
      });

    if (paymentError) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ø–ª–∞—Ç–µ–∂–∞:', paymentError);
      throw paymentError;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { error: profileError } = await supabase
      .from('profiles')
      .update({
        is_premium: true,
        premium_expires_at: expiresAt.toISOString()
      })
      .eq('id', user_id);

    if (profileError) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', profileError);
      throw profileError;
    }

    console.log('–ü–æ–¥–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', {
      subscription_id: subscription.id,
      expires_at: expiresAt.toISOString(),
      is_recurring: is_recurring,
      is_first_recurring: is_first_recurring
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const botToken = Deno.env.get('TELEGRAM_BOT_TOKEN');
    if (botToken) {
      try {
        const { data: user } = await supabase
          .from('profiles')
          .select('telegram_id, first_name')
          .eq('id', user_id)
          .single();

        if (user?.telegram_id) {
          const notificationMessage = is_first_recurring 
            ? `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, ${user.first_name}!\n\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ TRICKS PREMIUM –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º!\n\n‚ú® –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.\n\n–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${expiresAt.toLocaleDateString('ru-RU')}\n\nüîÑ –ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü.`
            : `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ TRICKS PREMIUM –ø—Ä–æ–¥–ª–µ–Ω–∞!\n\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${expiresAt.toLocaleDateString('ru-RU')}\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!`;

          await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              chat_id: user.telegram_id,
              text: notificationMessage,
              parse_mode: 'HTML'
            }),
          });
        }
      } catch (notificationError) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notificationError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      }
    }

    return new Response(
      JSON.stringify({
        success: true,
        subscription_id: subscription.id,
        expires_at: expiresAt.toISOString(),
        is_recurring: is_recurring,
        is_first_recurring: is_first_recurring,
        message: 'Payment processed successfully'
      }),
      {
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ process-payment:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
};

serve(serve_handler);
