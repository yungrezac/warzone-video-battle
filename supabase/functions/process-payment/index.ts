
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface ProcessPaymentRequest {
  user_id: string;
  telegram_payment_charge_id: string;
  telegram_invoice_payload: string;
}

const serve_handler = async (req: Request): Promise<Response> => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { 
      user_id, 
      telegram_payment_charge_id, 
      telegram_invoice_payload 
    }: ProcessPaymentRequest = await req.json();
    
    console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞:', {
      user_id,
      telegram_payment_charge_id,
      telegram_invoice_payload
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase –∫–ª–∏–µ–Ω—Ç
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    const { data, error } = await supabase.rpc('create_subscription_after_payment', {
      p_user_id: user_id,
      p_telegram_charge_id: telegram_payment_charge_id,
      p_invoice_payload: telegram_invoice_payload,
      p_amount_stars: 300
    });

    if (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      throw error;
    }

    const result = data as { success: boolean; error?: string; subscription_id?: string; expires_at?: string };

    if (!result.success) {
      console.error('–ü–ª–∞—Ç–µ–∂ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', result.error);
      return new Response(
        JSON.stringify({ error: result.error }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    console.log('–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ:', {
      subscription_id: result.subscription_id,
      expires_at: result.expires_at
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    const botToken = Deno.env.get('TELEGRAM_BOT_TOKEN');
    if (botToken) {
      try {
        const { data: user } = await supabase
          .from('profiles')
          .select('telegram_id, first_name')
          .eq('id', user_id)
          .single();

        if (user?.telegram_id) {
          const notificationMessage = `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, ${user.first_name}!\n\n–í–∞—à–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n‚ú® –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏:\n‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ\n‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ\n‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∑–Ω–∞—á–∫–∏\n‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!\n\n–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${new Date(result.expires_at!).toLocaleDateString('ru-RU')}`;

          await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              chat_id: user.telegram_id,
              text: notificationMessage,
              parse_mode: 'HTML'
            }),
          });
        }
      } catch (notificationError) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', notificationError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      }
    }

    return new Response(
      JSON.stringify({
        success: true,
        subscription_id: result.subscription_id,
        expires_at: result.expires_at,
        message: 'Payment processed successfully'
      }),
      {
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ process-payment:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
};

serve(serve_handler);
