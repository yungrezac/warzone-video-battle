
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";

const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN');
const WEBAPP_URL = 'https://cibytresc-wntdgxqjpfm.lovableproject.com'; // URL –≤–∞—à–µ–≥–æ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface TelegramUpdate {
  message?: {
    chat: {
      id: number;
    };
    from: {
      id: number;
      first_name: string;
      username?: string;
    };
    text: string;
  };
}

const handler = async (req: Request): Promise<Response> => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram –±–æ—Ç–∞');
    
    if (!TELEGRAM_BOT_TOKEN) {
      throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    const update: TelegramUpdate = await req.json();
    console.log('Telegram update:', update);

    if (!update.message) {
      return new Response(JSON.stringify({ success: true }), {
        status: 200,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const { chat, from, text } = update.message;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
    if (text === '/start') {
      await sendWelcomeMessage(chat.id, from.first_name);
    }

    return new Response(JSON.stringify({ success: true }), {
      status: 200,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –≤ telegram-bot —Ñ—É–Ω–∫—Ü–∏–∏:', error);
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: error.message 
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
};

async function sendWelcomeMessage(chatId: number, firstName: string) {
  const welcomeText = `üõº –ü—Ä–∏–≤–µ—Ç, ${firstName}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>WZ Battle</b> ‚Äî —Å–∞–º–æ–µ –∫—Ä—É—Ç–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–æ–ª–ª–µ—Ä–æ–≤!

üî• <b>–ß—Ç–æ —Ç–µ–±—è –∂–¥–µ—Ç:</b>
‚Ä¢ –ó–∞–≥—Ä—É–∂–∞–π –≤–∏–¥–µ–æ —Å–≤–æ–∏—Ö —Ç—Ä—é–∫–æ–≤
‚Ä¢ –£—á–∞—Å—Ç–≤—É–π –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö  
‚Ä¢ –ü–æ–ª—É—á–∞–π –ª–∞–π–∫–∏ –∏ –æ—Ü–µ–Ω–∫–∏ –æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –±–∞–ª–ª—ã –∑–∞ –ø–æ–±–µ–¥—ã
‚Ä¢ –û—Ç–∫—Ä—ã–≤–∞–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
‚Ä¢ –ü–æ–∫—É–ø–∞–π –∫—Ä—É—Ç—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ

üèÜ <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–æ—Ö–æ–¥–∏—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –ª—É—á—à–∏–π —Ç—Ä—é–∫. –ü–æ–±–µ–∂–¥–∞–µ—Ç –≤–∏–¥–µ–æ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—Ü–µ–Ω–æ–∫! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –±–∞–ª–ª—ã —Ä–∞–≤–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ–ª–æ—Å–æ–≤.

–ì–æ—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏? –ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ! üëá`;

  const keyboard = {
    inline_keyboard: [
      [{
        text: "üöÄ –û—Ç–∫—Ä—ã—Ç—å WZ Battle",
        web_app: {
          url: WEBAPP_URL
        }
      }]
    ]
  };

  console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);

  const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      chat_id: chatId,
      text: welcomeText,
      parse_mode: 'HTML',
      reply_markup: keyboard,
    }),
  });

  const telegramData = await response.json();
  
  if (!response.ok) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram:', telegramData);
    throw new Error(`Telegram API error: ${telegramData.description || 'Unknown error'}`);
  }

  console.log('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:', telegramData);
}

serve(handler);
