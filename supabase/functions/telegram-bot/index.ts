
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const serve_handler = async (req: Request): Promise<Response> => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const update = await req.json();
    console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram:', JSON.stringify(update, null, 2));

    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    const botToken = Deno.env.get('TELEGRAM_BOT_TOKEN');
    if (!botToken) {
      throw new Error('TELEGRAM_BOT_TOKEN not set');
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (–≤–∫–ª—é—á–∞—è —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏)
    if (update.message?.successful_payment) {
      const payment = update.message.successful_payment;
      const user = update.message.from;
      
      console.log('üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', {
        telegram_payment_charge_id: payment.telegram_payment_charge_id,
        invoice_payload: payment.invoice_payload,
        user_id: user.id,
        total_amount: payment.total_amount,
        currency: payment.currency,
        subscription_expiration_date: payment.subscription_expiration_date,
        is_recurring: payment.is_recurring,
        is_first_recurring: payment.is_first_recurring
      });

      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { data: userProfile } = await supabase
        .from('profiles')
        .select('id, first_name')
        .eq('telegram_id', user.id.toString())
        .single();

      if (userProfile) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é
        const { data, error } = await supabase.functions.invoke('process-payment', {
          body: {
            user_id: userProfile.id,
            telegram_payment_charge_id: payment.telegram_payment_charge_id,
            telegram_invoice_payload: payment.invoice_payload,
            subscription_expiration_date: payment.subscription_expiration_date,
            is_recurring: payment.is_recurring || false,
            is_first_recurring: payment.is_first_recurring || false
          }
        });

        if (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
        } else {
          console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ:', data);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          const confirmationMessage = payment.is_first_recurring 
            ? `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, ${userProfile.first_name}!\n\nüíé –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ TRICKS PREMIUM –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º!\n\n‚ú® –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∏–¥–µ–æ\n‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ –ø—Ä–µ–º–∏—É–º —Ç—É—Ä–Ω–∏—Ä–∞—Ö\n‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Å–∫–∏–¥–∫–∏ —É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤\n‚Ä¢ –í—ã–≤–æ–¥ –±–∞–ª–ª–æ–≤ –≤ USDT\n\nüîÑ –ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü.`
            : `‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ TRICKS PREMIUM –ø—Ä–æ–¥–ª–µ–Ω–∞!\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞! üíú`;

          await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              chat_id: user.id,
              text: confirmationMessage,
              parse_mode: 'HTML'
            }),
          });
        }
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if (update.message?.text) {
      const chatId = update.message.chat.id;
      const text = update.message.text;
      const user = update.message.from;

      let response = '';

      switch (text) {
        case '/start':
          response = `üèÑ‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TRICKS, ${user.first_name}!\n\nüéÆ <b>TRICKS</b> - —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞!\n\n‚ú® <b>–ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç:</b>\n‚Ä¢ üìπ –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –≤–∏–¥–µ–æ —Å —Ç—Ä—é–∫–∞–º–∏\n‚Ä¢ üèÜ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö\n‚Ä¢ üí∞ –ü–æ–ª—É—á–∞–π—Ç–µ –±–∞–ª–ª—ã –∏ –ø—Ä–∏–∑—ã\n‚Ä¢ üë• –û–±—â–∞–π—Ç–µ—Å—å —Å –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–∞–º–∏\n‚Ä¢ üõí –ü–æ–∫—É–ø–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –º–∞—Ä–∫–µ—Ç–µ\n\nüöÄ <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n/app - –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n/premium - Premium –ø–æ–¥–ø–∏—Å–∫–∞\n/help - –ü–æ–º–æ—â—å`;
          break;

        case '/app':
          response = `üéÆ <b>–ó–∞–ø—É—Å–∫–∞–π—Ç–µ TRICKS!</b>\n\nüîó –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –±–æ—Ç–∞.\n\n‚ú® –í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤–∞—Å –∂–¥—É—Ç:\n‚Ä¢ –õ–µ–Ω—Ç–∞ —Å –∫—Ä—É—Ç—ã–º–∏ –≤–∏–¥–µ–æ —Ç—Ä—é–∫–æ–≤\n‚Ä¢ –¢—É—Ä–Ω–∏—Ä—ã —Å –¥–µ–Ω–µ–∂–Ω—ã–º–∏ –ø—Ä–∏–∑–∞–º–∏\n‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n‚Ä¢ –ú–∞—Ä–∫–µ—Ç —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–ª—è —Å–ø–æ—Ä—Ç–∞`;
          break;

        case '/premium':
          response = `üíé <b>TRICKS PREMIUM</b>\n\nüåü <b>–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n‚Ä¢ ‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –ª–µ–Ω—Ç–µ\n‚Ä¢ üèÜ –î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º —Ç—É—Ä–Ω–∏—Ä–∞–º\n‚Ä¢ üõçÔ∏è –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Å–∫–∏–¥–∫–∏ —É –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤\n‚Ä¢ üíµ –í—ã–≤–æ–¥ –±–∞–ª–ª–æ–≤ –≤ USDT\n‚Ä¢ üëë –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ\n‚Ä¢ üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\nüí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 300 Telegram Stars –≤ –º–µ—Å—è—Ü\nüîÑ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ</b>\n\nüì± –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TRICKS!`;
          break;

        case '/help':
          response = `‚ùì <b>–ü–æ–º–æ—â—å TRICKS</b>\n\nüìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\nüéÆ /app - –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\nüíé /premium - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Premium\nüìû /support - –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n\nüì± <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n‚Ä¢ –í—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n‚Ä¢ –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –≤–∏–¥–µ–æ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ª–∞–π–∫–∏\n‚Ä¢ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö\n‚Ä¢ –ü–æ–∫—É–ø–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –∑–∞ –±–∞–ª–ª—ã\n\nüÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ /support`;
          break;

        case '/support':
          response = `üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ TRICKS</b>\n\nüë®‚Äçüíº <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> @tricksby\n\n‚è∞ <b>–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:</b> –æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n\nüìù <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å:</b>\n‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –≤ —á–∞—Ç–µ\n‚Ä¢ –ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ\n‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à username –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏\n\nüí¨ –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å!`;
          break;

        case '/stats':
          // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const { data: userProfile } = await supabase
            .from('profiles')
            .select(`
              *,
              user_points (total_points, wins_count)
            `)
            .eq('telegram_id', user.id.toString())
            .single();

          if (userProfile) {
            const points = userProfile.user_points?.[0];
            response = `üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ TRICKS</b>\n\nüë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b> ${userProfile.first_name}\nüí∞ <b>–ë–∞–ª–ª—ã:</b> ${points?.total_points || 0}\nüèÜ <b>–ü–æ–±–µ–¥:</b> ${points?.wins_count || 0}\n${userProfile.is_premium ? 'üëë <b>Premium:</b> –ê–∫—Ç–∏–≤–µ–Ω' : '‚≠ê <b>–°—Ç–∞—Ç—É—Å:</b> –û–±—ã—á–Ω—ã–π'}\n\nüéÆ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!`;
          } else {
            response = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>\n\n–°–Ω–∞—á–∞–ª–∞ –∑–∞–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ TRICKS, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å!\n\nüéÆ /app - –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ`;
          }
          break;

        default:
          if (text.startsWith('/')) {
            response = `‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞</b>\n\nüìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\nüéÆ /app - –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\nüíé /premium - Premium –ø–æ–¥–ø–∏—Å–∫–∞\nüìä /stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n‚ùì /help - –ü–æ–º–æ—â—å\nüìû /support - –ü–æ–¥–¥–µ—Ä–∂–∫–∞`;
          } else {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
            response = `üí¨ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>\n\n–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\nüìû –î–ª—è —Å—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: @tricksby\nüéÆ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: /app`;
          }
          break;
      }

      if (response) {
        await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: chatId,
            text: response,
            parse_mode: 'HTML'
          }),
        });
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ pre_checkout_query –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    if (update.pre_checkout_query) {
      const preCheckoutQuery = update.pre_checkout_query;
      
      console.log('üîç Pre-checkout query:', {
        id: preCheckoutQuery.id,
        currency: preCheckoutQuery.currency,
        total_amount: preCheckoutQuery.total_amount,
        invoice_payload: preCheckoutQuery.invoice_payload
      });

      await fetch(`https://api.telegram.org/bot${botToken}/answerPreCheckoutQuery`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          pre_checkout_query_id: preCheckoutQuery.id,
          ok: true
        }),
      });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (inline –∫–Ω–æ–ø–∫–∏)
    if (update.callback_query) {
      const callbackQuery = update.callback_query;
      const chatId = callbackQuery.message.chat.id;
      
      console.log('üîò Callback query:', callbackQuery.data);

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
      await fetch(`https://api.telegram.org/bot${botToken}/answerCallbackQuery`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          callback_query_id: callbackQuery.id,
          text: '–ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞!'
        }),
      });
    }

    return new Response(JSON.stringify({ ok: true }), {
      status: 200,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ telegram-bot:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
};

serve(serve_handler);
