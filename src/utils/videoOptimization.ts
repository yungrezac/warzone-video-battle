
// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
export const compressVideo = async (file: File, quality: number = 0.6): Promise<File> => {
  return new Promise((resolve, reject) => {
    const video = document.createElement('video');
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    
    if (!ctx) {
      reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å canvas context'));
      return;
    }

    video.onloadedmetadata = () => {
      // –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
      const maxWidth = 854;  // 480p width
      const maxHeight = 480; // 480p height
      
      let { videoWidth, videoHeight } = video;
      
      // –í—Å–µ–≥–¥–∞ —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–≥–æ —É—Å–∫–æ—Ä–µ–Ω–∏—è
      const ratio = Math.min(maxWidth / videoWidth, maxHeight / videoHeight);
      videoWidth = Math.floor(videoWidth * ratio);
      videoHeight = Math.floor(videoHeight * ratio);
      
      canvas.width = videoWidth;
      canvas.height = videoHeight;
      
      // –°–æ–∑–¥–∞–µ–º MediaRecorder —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Å–∂–∞—Ç–∏–µ–º
      const stream = canvas.captureStream(20); // –°–Ω–∏–∂–∞–µ–º FPS –¥–æ 20
      
      let mimeType = 'video/webm;codecs=vp9';
      if (!MediaRecorder.isTypeSupported(mimeType)) {
        mimeType = 'video/webm;codecs=vp8';
      }
      if (!MediaRecorder.isTypeSupported(mimeType)) {
        mimeType = 'video/webm';
      }
      
      const mediaRecorder = new MediaRecorder(stream, {
        mimeType,
        videoBitsPerSecond: Math.min(500000, Math.floor(file.size / video.duration * quality)) // –ú–∞–∫—Å–∏–º—É–º 500kbps
      });
      
      const chunks: Blob[] = [];
      
      mediaRecorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          chunks.push(event.data);
        }
      };
      
      mediaRecorder.onstop = () => {
        const compressedBlob = new Blob(chunks, { type: 'video/webm' });
        const compressedFile = new File([compressedBlob], file.name.replace(/\.[^/.]+$/, '.webm'), {
          type: 'video/webm'
        });
        console.log(`üóúÔ∏è –°–∂–∞—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${(file.size / 1024 / 1024).toFixed(2)}MB ‚Üí ${(compressedFile.size / 1024 / 1024).toFixed(2)}MB`);
        resolve(compressedFile);
      };
      
      mediaRecorder.onerror = () => {
        reject(new Error('–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ'));
      };
      
      // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å
      mediaRecorder.start(100); // –ß–∞–Ω–∫–∏ –ø–æ 100–º—Å
      
      // –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Å–∂–∞—Ç–∏—è
      video.playbackRate = 2.0;
      video.currentTime = 0;
      video.play();
      
      const drawFrame = () => {
        if (!video.ended && !video.paused) {
          ctx.drawImage(video, 0, 0, videoWidth, videoHeight);
          requestAnimationFrame(drawFrame);
        } else {
          setTimeout(() => mediaRecorder.stop(), 100);
        }
      };
      
      video.onplay = () => {
        drawFrame();
      };
      
      // –¢–∞–π–º–∞—É—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      setTimeout(() => {
        if (mediaRecorder.state === 'recording') {
          mediaRecorder.stop();
        }
      }, 30000);
    };
    
    video.onerror = () => {
      reject(new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –¥–ª—è —Å–∂–∞—Ç–∏—è'));
    };
    
    video.src = URL.createObjectURL(file);
  });
};

export const shouldCompress = (file: File): boolean => {
  // –°–∂–∏–º–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ 5MB –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
  return file.size > 5 * 1024 * 1024;
};

export const getOptimalChunkSize = (fileSize: number): number => {
  // –ë–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–µ —á–∞–Ω–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  if (fileSize < 2 * 1024 * 1024) return 512 * 1024;  // 512KB
  if (fileSize < 10 * 1024 * 1024) return 1024 * 1024; // 1MB
  return 2 * 1024 * 1024; // 2MB –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
};

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é
export const generateQuickThumbnail = (videoFile: File): Promise<Blob> => {
  return new Promise((resolve, reject) => {
    const video = document.createElement('video');
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    
    if (!ctx) {
      reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å canvas context'));
      return;
    }

    video.preload = 'metadata';
    video.muted = true;
    
    video.onloadedmetadata = () => {
      // –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–¥—Ä–∞ –∏–∑ –Ω–∞—á–∞–ª–∞ –≤–∏–¥–µ–æ
      video.currentTime = 0.1; // –ë–µ—Ä–µ–º –∫–∞–¥—Ä —Å 0.1 —Å–µ–∫—É–Ω–¥—ã
    };
    
    video.onseeked = () => {
      try {
        // –ù–µ–±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
        const maxWidth = 320;
        const maxHeight = 240;
        
        let { videoWidth, videoHeight } = video;
        const ratio = Math.min(maxWidth / videoWidth, maxHeight / videoHeight);
        
        canvas.width = Math.floor(videoWidth * ratio);
        canvas.height = Math.floor(videoHeight * ratio);
        
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
        
        canvas.toBlob((blob) => {
          if (blob) {
            resolve(blob);
          } else {
            reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–≤—å—é'));
          }
        }, 'image/jpeg', 0.7); // –£–º–µ—Ä–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
      } catch (error) {
        reject(error);
      }
    };
    
    video.onerror = () => {
      reject(new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é'));
    };
    
    const videoUrl = URL.createObjectURL(videoFile);
    video.src = videoUrl;
    
    video.onloadstart = () => {
      URL.revokeObjectURL(videoUrl);
    };
    
    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ñ–µ–π–ª–∞
    setTimeout(() => {
      reject(new Error('–¢–∞–π–º–∞—É—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é'));
    }, 5000);
  });
};
