import compress from 'browser-video-compression';

const COMPRESSION_OPTIONS = {
  maxSizeMB: 5,
  maxWidthOrHeight: 1280,
  useWebWorker: true,
  maxIteration: 10,
  onProgress: (progress: number) => {
    console.log(`Compression progress: ${(progress * 100).toFixed(0)}%`);
  },
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ
export const compressVideo = async (file: File): Promise<File> => {
  console.log(`üé• –ù–∞—á–∏–Ω–∞–µ–º —Å–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ: ${(file.size / 1024 / 1024).toFixed(2)}MB`);
  try {
    const compressedFile = await compress(file, COMPRESSION_OPTIONS);
    console.log(`‚úÖ –°–∂–∞—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: ${(compressedFile.size / 1024 / 1024).toFixed(2)}MB`);
    return compressedFile;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ, –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª:', error);
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    return file;
  }
};

export const shouldCompress = (file: File): boolean => {
  // –°–∂–∏–º–∞–µ–º –≤–∏–¥–µ–æ –±–æ–ª—å—à–µ 10 –ú–ë
  const MAX_UNCOMPRESSED_SIZE_BYTES = 10 * 1024 * 1024; // 10 MB
  const should = file.size > MAX_UNCOMPRESSED_SIZE_BYTES;
  console.log(`ü§î –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∂–∞—Ç–∏—è: ${should ? '–î–∞' : '–ù–µ—Ç'}. –†–∞–∑–º–µ—Ä: ${(file.size / 1024 / 1024).toFixed(2)}MB`);
  return should;
};

export const getOptimalChunkSize = (fileSize: number): number => {
  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
  if (fileSize < 10 * 1024 * 1024) return 1024 * 1024;  // 1MB
  if (fileSize < 50 * 1024 * 1024) return 2 * 1024 * 1024; // 2MB
  return 4 * 1024 * 1024; // 4MB –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
export const generateQuickThumbnail = (videoFile: File): Promise<Blob> => {
  return new Promise((resolve, reject) => {
    const video = document.createElement('video');
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    
    if (!ctx) {
      reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å canvas context'));
      return;
    }

    video.preload = 'metadata';
    video.muted = true;
    
    video.onloadedmetadata = () => {
      // –ü–æ–ª—É—á–∞–µ–º –∫–∞–¥—Ä –∏–∑ –Ω–∞—á–∞–ª–∞ –≤–∏–¥–µ–æ
      video.currentTime = 0.1;
    };
    
    video.onseeked = () => {
      try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        const maxWidth = 480;
        const maxHeight = 360;
        
        let { videoWidth, videoHeight } = video;
        const ratio = Math.min(maxWidth / videoWidth, maxHeight / videoHeight);
        
        canvas.width = Math.floor(videoWidth * ratio);
        canvas.height = Math.floor(videoHeight * ratio);
        
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
        
        canvas.toBlob((blob) => {
          if (blob) {
            resolve(blob);
          } else {
            reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–≤—å—é'));
          }
        }, 'image/jpeg', 0.8);
      } catch (error) {
        reject(error);
      }
    };
    
    video.onerror = () => {
      reject(new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é'));
    };
    
    const videoUrl = URL.createObjectURL(videoFile);
    video.src = videoUrl;
    
    video.onloadstart = () => {
      URL.revokeObjectURL(videoUrl);
    };
    
    // –¢–∞–π–º–∞—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é
    setTimeout(() => {
      reject(new Error('–¢–∞–π–º–∞—É—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é'));
    }, 10000);
  });
};
