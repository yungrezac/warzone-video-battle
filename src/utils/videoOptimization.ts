
// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è –ª—É—á—à–µ–π –∑–∞–≥—Ä—É–∑–∫–∏)
export const compressVideo = async (file: File, quality: number = 0.8): Promise<File> => {
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –±–µ–∑ —Å–∂–∞—Ç–∏—è
  console.log('üé• –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ');
  return file;
};

export const shouldCompress = (file: File): boolean => {
  // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∂–∞—Ç–∏–µ
  return false;
};

export const getOptimalChunkSize = (fileSize: number): number => {
  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
  if (fileSize < 10 * 1024 * 1024) return 1024 * 1024;  // 1MB
  if (fileSize < 50 * 1024 * 1024) return 2 * 1024 * 1024; // 2MB
  return 4 * 1024 * 1024; // 4MB –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
export const preloadVideo = (src: string): Promise<HTMLVideoElement> => {
  return new Promise((resolve, reject) => {
    const video = document.createElement('video');
    video.preload = 'metadata';
    video.muted = true;
    
    const onCanPlay = () => {
      video.removeEventListener('canplay', onCanPlay);
      video.removeEventListener('error', onError);
      resolve(video);
    };
    
    const onError = () => {
      video.removeEventListener('canplay', onCanPlay);
      video.removeEventListener('error', onError);
      reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ'));
    };
    
    video.addEventListener('canplay', onCanPlay);
    video.addEventListener('error', onError);
    video.src = src;
    
    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
    setTimeout(() => {
      video.removeEventListener('canplay', onCanPlay);
      video.removeEventListener('error', onError);
      reject(new Error('–¢–∞–π–º–∞—É—Ç –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ'));
    }, 10000);
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
export const generateQuickThumbnail = (videoFile: File): Promise<Blob> => {
  return new Promise((resolve, reject) => {
    const video = document.createElement('video');
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    
    if (!ctx) {
      reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å canvas context'));
      return;
    }

    video.preload = 'metadata';
    video.muted = true;
    
    let hasResolved = false;
    
    video.onloadedmetadata = () => {
      // –ü–æ–ª—É—á–∞–µ–º –∫–∞–¥—Ä –∏–∑ –Ω–∞—á–∞–ª–∞ –≤–∏–¥–µ–æ
      video.currentTime = Math.min(0.5, video.duration * 0.1);
    };
    
    video.onseeked = () => {
      if (hasResolved) return;
      
      try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        const maxWidth = 480;
        const maxHeight = 360;
        
        let { videoWidth, videoHeight } = video;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–æ–≤
        if (!videoWidth || !videoHeight) {
          videoWidth = maxWidth;
          videoHeight = maxHeight;
        }
        
        const ratio = Math.min(maxWidth / videoWidth, maxHeight / videoHeight);
        
        canvas.width = Math.floor(videoWidth * ratio);
        canvas.height = Math.floor(videoHeight * ratio);
        
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
        
        canvas.toBlob((blob) => {
          if (blob && !hasResolved) {
            hasResolved = true;
            resolve(blob);
          } else if (!hasResolved) {
            hasResolved = true;
            reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–≤—å—é'));
          }
        }, 'image/jpeg', 0.8);
      } catch (error) {
        if (!hasResolved) {
          hasResolved = true;
          reject(error);
        }
      }
    };
    
    video.onerror = (error) => {
      if (!hasResolved) {
        hasResolved = true;
        reject(new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é'));
      }
    };
    
    const videoUrl = URL.createObjectURL(videoFile);
    video.src = videoUrl;
    
    video.onloadstart = () => {
      URL.revokeObjectURL(videoUrl);
    };
    
    // –¢–∞–π–º–∞—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é
    setTimeout(() => {
      if (!hasResolved) {
        hasResolved = true;
        reject(new Error('–¢–∞–π–º–∞—É—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–≤—å—é'));
      }
    }, 15000);
  });
};
