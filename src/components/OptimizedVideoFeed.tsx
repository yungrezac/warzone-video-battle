
import React, { useCallback } from 'react';
import { useOptimizedVideoFeed } from '@/hooks/useOptimizedVideoFeed';
import { useLikeVideo } from '@/hooks/useVideoLikes';
import { useAuth } from '@/components/AuthWrapper';
import LazyVideoCard from './LazyVideoCard';
import VideoCardSkeleton from './VideoCardSkeleton';
import { Button } from '@/components/ui/button';
import { RefreshCw } from 'lucide-react';
import { toast } from 'sonner';

const OptimizedVideoFeed: React.FC = () => {
  const { data: videos, isLoading, error, refetch } = useOptimizedVideoFeed(20);
  const { user } = useAuth();
  const likeVideoMutation = useLikeVideo();

  const handleLike = async (videoId: string) => {
    if (!user) {
      toast.error('–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã —Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫–∏');
      return;
    }

    const video = videos?.find(v => v.id === videoId);
    if (video) {
      console.log('üéØ OptimizedVideoFeed: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∞–π–∫ –¥–ª—è –≤–∏–¥–µ–æ:', videoId);
      try {
        await likeVideoMutation.mutateAsync({
          videoId,
          isLiked: video.user_liked || false
        });
        console.log('‚úÖ OptimizedVideoFeed: –õ–∞–π–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
        toast.success(video.user_liked ? '–õ–∞–π–∫ —É–±—Ä–∞–Ω' : '–õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω');
      } catch (error) {
        console.error('‚ùå OptimizedVideoFeed: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∞–π–∫–∞:', error);
        toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∞–π–∫–∞');
      }
    }
  };

  const handleRefresh = useCallback(() => {
    refetch();
  }, [refetch]);

  if (error) {
    return (
      <div className="flex flex-col items-center justify-center p-8 text-center">
        <p className="text-red-500 mb-4">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ</p>
        <Button onClick={handleRefresh} variant="outline">
          <RefreshCw className="w-4 h-4 mr-2" />
          –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
        </Button>
      </div>
    );
  }

  return (
    <div className="space-y-2 p-2">
      {isLoading ? (
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∫–µ–ª–µ—Ç–æ–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        Array.from({ length: 6 }).map((_, index) => (
          <VideoCardSkeleton key={index} />
        ))
      ) : (
        videos?.map((video) => (
          <LazyVideoCard
            key={video.id}
            video={video}
            onLike={handleLike}
          />
        ))
      )}
    </div>
  );
};

export default OptimizedVideoFeed;
