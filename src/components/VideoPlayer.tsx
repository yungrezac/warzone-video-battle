import React, { useState, useRef, useEffect } from 'react';
import { Play, Pause, Volume2, VolumeX, Maximize } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { useVideoViews } from '@/hooks/useVideoViews';
import { useVideoPlayback } from '@/contexts/VideoPlaybackContext';

interface VideoPlayerProps {
  src: string;
  thumbnail: string;
  title: string;
  className?: string;
  videoId?: string;
}

const VideoPlayer: React.FC<VideoPlayerProps> = ({ src, thumbnail, title, className = '', videoId }) => {
  const [isPlaying, setIsPlaying] = useState(false);
  const [isMuted, setIsMuted] = useState(false);
  const [showControls, setShowControls] = useState(true);
  const [hasViewBeenCounted, setHasViewBeenCounted] = useState(false);
  const [isActivated, setIsActivated] = useState(false); // –ó–∞–≥—Ä—É–∂–∞–ª—Å—è –ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ –∫–ª–∏–∫—É
  const videoRef = useRef<HTMLVideoElement>(null);
  const { markVideoAsViewed } = useVideoViews();
  const { currentPlayingVideo, setCurrentPlayingVideo, videoToPreload } = useVideoPlayback();

  const shouldPreload = videoId === videoToPreload;
  const shouldLoadSource = isActivated || shouldPreload;

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
  useEffect(() => {
    if (isActivated && videoRef.current && !isPlaying) {
      // –î–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—É –Ω–µ–±–æ–ª—å—à–æ–π —Ç–∞–π–º–∞—É—Ç, —á—Ç–æ–±—ã –æ–Ω —É—Å–ø–µ–ª –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—ã–π src
      setTimeout(() => {
        videoRef.current?.play().catch(e => console.error(`–ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ ${videoId} –Ω–µ —É–¥–∞–ª–æ—Å—å:`, e));
      }, 50);
    }
  }, [isActivated, videoId]);

  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –µ—Å–ª–∏ –∏–≥—Ä–∞–µ—Ç –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ
  useEffect(() => {
    if (currentPlayingVideo && currentPlayingVideo !== videoId && isPlaying) {
      console.log(`–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–µ–æ ${videoId}, –∏–≥—Ä–∞–µ—Ç ${currentPlayingVideo}`);
      if (videoRef.current) {
        videoRef.current.pause();
      }
      setIsPlaying(false);
    }
  }, [currentPlayingVideo, videoId, isPlaying]);

  // –ü–∞—É–∑–∞, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—ã–ª –æ—á–∏—â–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞)
  useEffect(() => {
    if (currentPlayingVideo === null && isPlaying && videoRef.current) {
      console.log(`‚ñ∂Ô∏è‚è∏Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º–æ–≥–æ –≤–∏–¥–µ–æ –æ—á–∏—â–µ–Ω, —Å—Ç–∞–≤–∏–º –Ω–∞ –ø–∞—É–∑—É ${videoId}`);
      videoRef.current.pause();
    }
  }, [currentPlayingVideo, isPlaying, videoId]);

  const handleVideoView = async () => {
    // –ó–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏
    if (videoId && !hasViewBeenCounted) {
      console.log('üé¨ –ü–µ—Ä–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ, –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä:', videoId);
      try {
        await markVideoAsViewed(videoId);
        setHasViewBeenCounted(true);
        console.log('‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—Å—á–∏—Ç–∞–Ω –¥–ª—è –≤–∏–¥–µ–æ:', videoId);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—Å—á–∏—Ç—ã–≤–∞–Ω–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', error);
      }
    }
  };

  const togglePlay = () => {
    if (!isActivated) {
      console.log(`‚ñ∂Ô∏è –ü–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏–¥–µ–æ ${videoId}`);
      setIsActivated(true);
      return; // –≠—Ñ—Ñ–µ–∫—Ç –ø–æ–∑–∞–±–æ—Ç–∏—Ç—Å—è –æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏
    }

    if (videoRef.current) {
      if (isPlaying) {
        videoRef.current.pause();
      } else {
        videoRef.current.play();
      }
      // isPlaying –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ onPlay/onPause —Å–æ–±—ã—Ç–∏—è
    }
  };

  const toggleMute = () => {
    if (videoRef.current) {
      videoRef.current.muted = !isMuted;
      setIsMuted(!isMuted);
    }
  };

  const toggleFullscreen = () => {
    if (videoRef.current) {
      if (videoRef.current.requestFullscreen) {
        videoRef.current.requestFullscreen();
      }
    }
  };

  const handleVideoClick = () => {
    togglePlay();
  };

  const handleVideoEnd = () => {
    setIsPlaying(false);
    if(videoId === currentPlayingVideo) {
      setCurrentPlayingVideo(null);
    }
  };

  const handleMouseEnter = () => {
    setShowControls(true);
  };

  const handleMouseLeave = () => {
    if (isPlaying) {
      setShowControls(false);
    }
  };

  const handleVideoPlayEvent = () => {
    setIsPlaying(true);
    if (videoId) {
      setCurrentPlayingVideo(videoId);
    }
    handleVideoView();
  };

  const handleVideoPauseEvent = () => {
    setIsPlaying(false);
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º currentPlayingVideo —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ —Ç–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ
    if(videoId === currentPlayingVideo) {
      setCurrentPlayingVideo(null);
    }
  };

  return (
    <div 
      className={`relative bg-black rounded-lg overflow-hidden ${className}`}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
    >
      <video
        ref={videoRef}
        src={shouldLoadSource ? src : undefined}
        poster={thumbnail}
        className="w-full h-full object-contain cursor-pointer"
        onClick={handleVideoClick}
        onEnded={handleVideoEnd}
        onPlay={handleVideoPlayEvent}
        onPause={handleVideoPauseEvent}
        playsInline
        preload={shouldPreload ? "auto" : "none"}
      />
      
      {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è */}
      {!isPlaying && (
        <div className="absolute inset-0 flex items-center justify-center bg-black bg-opacity-30">
          <Button
            size="lg"
            className="bg-white bg-opacity-80 hover:bg-opacity-100 text-black rounded-full w-16 h-16"
            onClick={togglePlay}
          >
            <Play className="w-8 h-8 ml-1" />
          </Button>
        </div>
      )}

      {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      {showControls && (
        <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black to-transparent p-4">
          <div className="flex items-center justify-between text-white">
            <div className="flex items-center space-x-2">
              <Button
                variant="ghost"
                size="sm"
                onClick={togglePlay}
                className="text-white hover:bg-white hover:bg-opacity-20"
              >
                {isPlaying ? <Pause className="w-5 h-5" /> : <Play className="w-5 h-5" />}
              </Button>
              
              <Button
                variant="ghost"
                size="sm"
                onClick={toggleMute}
                className="text-white hover:bg-white hover:bg-opacity-20"
              >
                {isMuted ? <VolumeX className="w-5 h-5" /> : <Volume2 className="w-5 h-5" />}
              </Button>
            </div>

            <Button
              variant="ghost"
              size="sm"
              onClick={toggleFullscreen}
              className="text-white hover:bg-white hover:bg-opacity-20"
            >
              <Maximize className="w-5 h-5" />
            </Button>
          </div>
        </div>
      )}
    </div>
  );
};

export default VideoPlayer;
