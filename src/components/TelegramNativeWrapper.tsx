
import React, { useEffect, ReactNode } from 'react';
import { useTelegramWebApp } from '@/hooks/useTelegramWebApp';
import { useTelegramTheme } from '@/hooks/useTelegramTheme';
import { useAuth } from './AuthWrapper';

interface TelegramNativeWrapperProps {
  children: ReactNode;
}

const TelegramNativeWrapper: React.FC<TelegramNativeWrapperProps> = ({ children }) => {
  const { 
    webApp, 
    isTelegramWebApp, 
    colorScheme,
    hapticFeedback,
    setSettingsButton,
    platform,
    version
  } = useTelegramWebApp();
  const { themeColors, isDark } = useTelegramTheme();
  const { user } = useAuth();

  useEffect(() => {
    if (isTelegramWebApp && webApp) {
      console.log('üé® –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –Ω–∞—Ç–∏–≤–Ω—É—é —Ç–µ–º—É Telegram');
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É Telegram –∫ body
      const body = document.body;
      const root = document.documentElement;
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞
      body.style.backgroundColor = themeColors.bg_color;
      body.style.color = themeColors.text_color;

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å —Ç–µ–º—ã
      if (isDark) {
        body.classList.add('dark');
        root.classList.add('dark');
      } else {
        body.classList.remove('dark');
        root.classList.remove('dark');
      }

      // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ
      body.style.overscrollBehavior = 'none';
      body.style.userSelect = 'none';
      (body.style as any).webkitUserSelect = 'none';
      (body.style as any).webkitTapHighlightColor = 'transparent';
      body.style.touchAction = 'manipulation';
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑—É–º–∞
      const viewport = document.querySelector('meta[name="viewport"]');
      if (viewport) {
        viewport.setAttribute('content', 
          'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover, interactive-widget=resizes-content'
        );
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–º—ã Telegram
      Object.entries(themeColors).forEach(([key, value]) => {
        root.style.setProperty(`--tg-theme-${key.replace('_', '-')}`, value);
      });

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Ñ–æ–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      if (webApp.setHeaderColor) {
        webApp.setHeaderColor(themeColors.header_bg_color);
      }
      if (webApp.setBackgroundColor) {
        webApp.setBackgroundColor(themeColors.bg_color);
      }

      console.log('‚úÖ –ù–∞—Ç–∏–≤–Ω–∞—è —Ç–µ–º–∞ Telegram –ø—Ä–∏–º–µ–Ω–µ–Ω–∞:', {
        platform,
        version,
        colorScheme,
        themeColors: Object.keys(themeColors).length
      });
    }
  }, [isTelegramWebApp, webApp, themeColors, isDark, platform, version, colorScheme]);

  useEffect(() => {
    if (isTelegramWebApp && user && webApp) {
      console.log('üë§ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.first_name);
      
      // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è
      webApp.enableClosingConfirmation();

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –Ω–∞—Ç–∏–≤–Ω—ã–º —Å—Ç–∏–ª–µ–º
      setSettingsButton(true, () => {
        hapticFeedback('selection');
        console.log('‚öôÔ∏è –ù–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã');
      });

      // –†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
      if (webApp.expand && !webApp.isExpanded) {
        webApp.expand();
      }
    }
  }, [isTelegramWebApp, user, webApp, setSettingsButton, hapticFeedback]);

  // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –∂–µ—Å—Ç–æ–≤ –∏ —Å–æ–±—ã—Ç–∏–π
  useEffect(() => {
    if (isTelegramWebApp && webApp) {
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –∂–µ—Å—Ç–æ–≤
      const preventDefaultGestures = (e: TouchEvent) => {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –∫–∞—Å–∞–Ω–∏–∏
        if (e.touches.length > 1) {
          e.preventDefault();
        }
      };

      const preventContextMenu = (e: Event) => {
        e.preventDefault();
      };

      const handleTouchMove = (e: TouchEvent) => {
        const target = e.target as Element;
        const scrollableParent = target.closest('[data-scrollable="true"]');
        
        if (!scrollableParent) {
          e.preventDefault();
          return;
        }

        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è bounce —ç—Ñ—Ñ–µ–∫—Ç–∞
        const element = scrollableParent as HTMLElement;
        const { scrollTop, scrollHeight, clientHeight } = element;
        const touchY = e.touches[0].clientY;
        const startY = e.touches[0].pageY;
        
        const isAtTop = scrollTop <= 0;
        const isAtBottom = scrollTop + clientHeight >= scrollHeight - 1;
        
        if ((isAtTop && startY < touchY) || (isAtBottom && startY > touchY)) {
          e.preventDefault();
        }
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      document.addEventListener('touchstart', preventDefaultGestures, { passive: false });
      document.addEventListener('touchmove', handleTouchMove, { passive: false });
      document.addEventListener('contextmenu', preventContextMenu, { passive: false });
      
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
      const handleThemeChange = () => {
        console.log('üé® –¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞:', webApp.colorScheme);
        hapticFeedback('selection');
      };

      webApp.onEvent('themeChanged', handleThemeChange);

      return () => {
        document.removeEventListener('touchstart', preventDefaultGestures);
        document.removeEventListener('touchmove', handleTouchMove);
        document.removeEventListener('contextmenu', preventContextMenu);
        webApp.offEvent('themeChanged', handleThemeChange);
      };
    }
  }, [isTelegramWebApp, webApp, hapticFeedback]);

  return (
    <div 
      className={`
        min-h-screen telegram-scroll-container telegram-native-app
        ${isTelegramWebApp ? 'telegram-webapp' : ''}
      `}
      data-scrollable="true"
      style={{
        backgroundColor: themeColors.bg_color,
        color: themeColors.text_color,
        minHeight: isTelegramWebApp ? '100dvh' : '100vh',
      }}
    >
      {children}
    </div>
  );
};

export default TelegramNativeWrapper;
