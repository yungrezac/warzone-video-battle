
import React, { useEffect, ReactNode } from 'react';
import { useTelegramWebApp } from '@/hooks/useTelegramWebApp';
import { useAuth } from './AuthWrapper';

interface TelegramNativeWrapperProps {
  children: ReactNode;
}

const TelegramNativeWrapper: React.FC<TelegramNativeWrapperProps> = ({ children }) => {
  const { 
    webApp, 
    isTelegramWebApp, 
    colorScheme,
    viewportHeight,
    isExpanded,
    showBackButton,
    hideBackButton,
    showSettingsButton,
    hideSettingsButton,
    hapticFeedback,
    expand
  } = useTelegramWebApp();
  const { user } = useAuth();

  useEffect(() => {
    if (isTelegramWebApp && webApp) {
      console.log('üé® –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –Ω–∞—Ç–∏–≤–Ω—É—é —Ç–µ–º—É Telegram');
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É Telegram –∫ body
      const body = document.body;
      const root = document.documentElement;
      
      if (colorScheme === 'dark') {
        body.classList.add('dark');
        root.classList.add('dark');
      } else {
        body.classList.remove('dark');
        root.classList.remove('dark');
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–º—ã
      const themeVars = {
        '--tg-viewport-height': `${viewportHeight}px`,
        '--tg-viewport-stable-height': `${webApp.viewportStableHeight}px`,
        '--tg-safe-area-inset-top': webApp.safeAreaInset?.top ? `${webApp.safeAreaInset.top}px` : '0px',
        '--tg-safe-area-inset-bottom': webApp.safeAreaInset?.bottom ? `${webApp.safeAreaInset.bottom}px` : '0px',
        '--tg-safe-area-inset-left': webApp.safeAreaInset?.left ? `${webApp.safeAreaInset.left}px` : '0px',
        '--tg-safe-area-inset-right': webApp.safeAreaInset?.right ? `${webApp.safeAreaInset.right}px` : '0px',
      };

      Object.entries(themeVars).forEach(([property, value]) => {
        root.style.setProperty(property, value);
      });

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      body.style.backgroundColor = 'var(--tg-theme-bg-color, #ffffff)';
      body.style.color = 'var(--tg-theme-text-color, #000000)';
      body.style.overscrollBehavior = 'none';
      body.style.userSelect = 'none';
      body.style.webkitUserSelect = 'none';
      body.style.webkitTouchCallout = 'none';
      body.style.webkitTapHighlightColor = 'transparent';
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º viewport –¥–ª—è Telegram
      const viewport = document.querySelector('meta[name="viewport"]');
      if (viewport) {
        viewport.setAttribute('content', 
          'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover, interactive-widget=resizes-content'
        );
      }

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ
      if (!isExpanded) {
        expand();
      }
    }
  }, [isTelegramWebApp, webApp, colorScheme, viewportHeight, isExpanded, expand]);

  useEffect(() => {
    if (isTelegramWebApp && user) {
      console.log('üë§ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.first_name);
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
      showBackButton(() => {
        hapticFeedback('impact');
        if (window.location.pathname !== '/') {
          window.history.back();
        } else {
          // –ï—Å–ª–∏ –º—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞
          webApp?.showConfirm('–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?', (confirmed) => {
            if (confirmed) {
              webApp?.close();
            }
          });
        }
      });

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      showSettingsButton(() => {
        hapticFeedback('selection');
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        console.log('Settings button clicked');
      });

      return () => {
        hideBackButton();
        hideSettingsButton();
      };
    }
  }, [isTelegramWebApp, user, showBackButton, hideBackButton, showSettingsButton, hideSettingsButton, hapticFeedback, webApp]);

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Ç–∏–≤–Ω—ã—Ö –∂–µ—Å—Ç–æ–≤ –∏ —Å–æ–±—ã—Ç–∏–π
  useEffect(() => {
    if (isTelegramWebApp) {
      const preventDefaultTouch = (e: TouchEvent) => {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º bounce effect –∏ pull-to-refresh
        if (e.touches.length > 1) {
          e.preventDefault();
        }

        const touch = e.touches[0];
        const target = e.target as Element;
        
        // –†–∞–∑—Ä–µ—à–∞–µ–º —Å–∫—Ä–æ–ª–ª —Ç–æ–ª—å–∫–æ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å data-scrollable
        if (!target.closest('[data-scrollable="true"]') && 
            !target.closest('.scrollable-content') && 
            !target.closest('input') && 
            !target.closest('textarea')) {
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º –¥–≤–∏–∂–µ–Ω–∏–µ–º –≤ –Ω–∞—á–∞–ª–µ –∏–ª–∏ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
          const isAtTop = window.scrollY <= 0;
          const isAtBottom = window.scrollY >= document.documentElement.scrollHeight - window.innerHeight;
          
          if ((isAtTop && touch.clientY > touch.clientY) || 
              (isAtBottom && touch.clientY < touch.clientY)) {
            e.preventDefault();
          }
        }
      };

      const preventDefaultWheel = (e: WheelEvent) => {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–∫—Ä–æ–ª–ª –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–µ–∑ data-scrollable
        const target = e.target as Element;
        if (!target.closest('[data-scrollable="true"]') && 
            !target.closest('.scrollable-content')) {
          e.preventDefault();
        }
      };

      document.addEventListener('touchstart', preventDefaultTouch, { passive: false });
      document.addEventListener('touchmove', preventDefaultTouch, { passive: false });
      document.addEventListener('wheel', preventDefaultWheel, { passive: false });

      return () => {
        document.removeEventListener('touchstart', preventDefaultTouch);
        document.removeEventListener('touchmove', preventDefaultTouch);
        document.removeEventListener('wheel', preventDefaultWheel);
      };
    }
  }, [isTelegramWebApp]);

  // –î–æ–±–∞–≤–ª—è–µ–º CSS –∫–ª–∞—Å—Å—ã –¥–ª—è Telegram-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
  const containerClasses = [
    'min-h-screen',
    'transition-all',
    'duration-300',
    isTelegramWebApp ? 'telegram-webapp' : '',
    isTelegramWebApp ? 'telegram-native' : '',
    colorScheme === 'dark' ? 'telegram-dark' : 'telegram-light',
  ].filter(Boolean).join(' ');

  const containerStyle: React.CSSProperties = {
    backgroundColor: isTelegramWebApp ? 'var(--tg-theme-bg-color)' : undefined,
    color: isTelegramWebApp ? 'var(--tg-theme-text-color)' : undefined,
    minHeight: isTelegramWebApp ? 'var(--tg-viewport-height, 100vh)' : '100vh',
    paddingTop: isTelegramWebApp ? 'var(--tg-safe-area-inset-top, 0px)' : undefined,
    paddingBottom: isTelegramWebApp ? 'var(--tg-safe-area-inset-bottom, 0px)' : undefined,
    paddingLeft: isTelegramWebApp ? 'var(--tg-safe-area-inset-left, 0px)' : undefined,
    paddingRight: isTelegramWebApp ? 'var(--tg-safe-area-inset-right, 0px)' : undefined,
  };

  return (
    <div className={containerClasses} style={containerStyle}>
      <div className="scrollable-content" data-scrollable="true">
        {children}
      </div>
    </div>
  );
};

export default TelegramNativeWrapper;
