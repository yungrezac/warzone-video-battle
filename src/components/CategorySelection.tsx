
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { MapPin } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/components/AuthWrapper';
import { toast } from 'sonner';

interface CategorySelectionProps {
  onComplete: () => void;
}

const CategorySelection: React.FC<CategorySelectionProps> = ({ onComplete }) => {
  const [selectedCategory, setSelectedCategory] = useState<string>('');
  const [isDetectingLocation, setIsDetectingLocation] = useState(false);
  const [detectedCity, setDetectedCity] = useState<string>('');
  const { user } = useAuth();

  const categories = [
    { id: 'Rollers', name: '–†–æ–ª–∏–∫–∏', emoji: 'üõº' },
    { id: 'BMX', name: '–ë–ú–•', emoji: 'üö≤' },
    { id: 'Skateboard', name: '–°–∫–µ–π—Ç–±–æ—Ä–¥', emoji: 'üõπ' }
  ];

  const detectLocation = async () => {
    setIsDetectingLocation(true);
    try {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          async (position) => {
            const { latitude, longitude } = position.coords;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Nominatim –¥–ª—è –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API)
            const response = await fetch(
              `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}&addressdetails=1`
            );
            const data = await response.json();
            
            const city = data.address?.city || data.address?.town || data.address?.village || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥';
            setDetectedCity(city);
            setIsDetectingLocation(false);
          },
          (error) => {
            console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
            toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
            setIsDetectingLocation(false);
          }
        );
      } else {
        toast.error('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º');
        setIsDetectingLocation(false);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞:', error);
      toast.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞');
      setIsDetectingLocation(false);
    }
  };

  const handleComplete = async () => {
    if (!selectedCategory) {
      toast.error('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ø–æ—Ä—Ç–∞');
      return;
    }

    if (!user) {
      toast.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return;
    }

    try {
      const { error } = await supabase
        .from('profiles')
        .update({
          sport_category: selectedCategory,
          city: detectedCity || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥'
        })
        .eq('id', user.id);

      if (error) throw error;

      toast.success('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      onComplete();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      toast.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    }
  };

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle className="text-center">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</CardTitle>
          <p className="text-center text-gray-600">
            –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–∞–º –æ —Å–µ–±–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–ø—ã—Ç–∞
          </p>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ø–æ—Ä—Ç–∞ */}
          <div>
            <h3 className="font-semibold mb-3">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Å–ø–æ—Ä—Ç:</h3>
            <div className="grid grid-cols-1 gap-2">
              {categories.map((category) => (
                <Button
                  key={category.id}
                  variant={selectedCategory === category.id ? "default" : "outline"}
                  className="h-12 justify-start"
                  onClick={() => setSelectedCategory(category.id)}
                >
                  <span className="text-xl mr-3">{category.emoji}</span>
                  {category.name}
                </Button>
              ))}
            </div>
          </div>

          {/* –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ */}
          <div>
            <h3 className="font-semibold mb-3">–í–∞—à –≥–æ—Ä–æ–¥:</h3>
            {detectedCity ? (
              <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg border border-green-200">
                <div className="flex items-center">
                  <MapPin className="w-4 h-4 text-green-600 mr-2" />
                  <span className="text-green-700">{detectedCity}</span>
                </div>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setDetectedCity('')}
                >
                  –ò–∑–º–µ–Ω–∏—Ç—å
                </Button>
              </div>
            ) : (
              <Button
                variant="outline"
                className="w-full"
                onClick={detectLocation}
                disabled={isDetectingLocation}
              >
                <MapPin className="w-4 h-4 mr-2" />
                {isDetectingLocation ? '–û–ø—Ä–µ–¥–µ–ª—è–µ–º...' : '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥'}
              </Button>
            )}
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è */}
          <Button
            className="w-full"
            onClick={handleComplete}
            disabled={!selectedCategory}
          >
            –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
          </Button>
        </CardContent>
      </Card>
    </div>
  );
};

export default CategorySelection;
