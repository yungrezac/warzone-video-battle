
import React, { useState, useRef } from 'react';
import { Upload, Video, X, AlertCircle } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { useUploadVideo } from '@/hooks/useVideos';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/components/AuthWrapper';
import CategorySelector from './CategorySelector';

const UploadVideo: React.FC = () => {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [category, setCategory] = useState<'Rollers' | 'BMX' | 'Skateboard'>('Rollers');
  const [uploadProgress, setUploadProgress] = useState(0);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const uploadMutation = useUploadVideo();
  const { toast } = useToast();
  const { user } = useAuth();

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    if (!file.type.startsWith('video/')) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª",
        variant: "destructive",
      });
      return;
    }

    // –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (25MB)
    if (file.size > 25 * 1024 * 1024) {
      toast({
        title: "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π",
        description: "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 25MB. –°–æ–∂–º–∏—Ç–µ –≤–∏–¥–µ–æ –≤ –ª—é–±–æ–º –≤–∏–¥–µ–æ—Ä–µ–¥–∞–∫—Ç–æ—Ä–µ.",
        variant: "destructive",
      });
      return;
    }

    setSelectedFile(file);
  };

  const handleButtonClick = () => {
    if (!user) {
      toast({
        title: "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
        description: "–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ",
        variant: "destructive",
      });
      return;
    }
    fileInputRef.current?.click();
  };

  const handleUpload = async () => {
    if (!user) {
      toast({
        title: "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
        description: "–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ",
        variant: "destructive",
      });
      return;
    }

    if (!selectedFile || !title.trim()) {
      toast({
        title: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ",
        description: "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
        variant: "destructive",
      });
      return;
    }
    
    try {
      console.log('üé¨ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id);
      
      await uploadMutation.mutateAsync({
        title: title.trim(),
        description: description.trim() || undefined,
        videoFile: selectedFile,
        category: category,
        onProgress: setUploadProgress,
      });

      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      setSelectedFile(null);
      setTitle('');
      setDescription('');
      setCategory('Rollers');
      setUploadProgress(0);
      
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
      
      toast({
        title: "–£—Å–ø–µ—à–Ω–æ!",
        description: "–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –ø–æ—è–≤–∏—Ç—Å—è –≤ –ª–µ–Ω—Ç–µ",
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
      setUploadProgress(0);
      
      let errorMessage = '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑';
      if (error instanceof Error) {
        if (error.message.includes('25MB') || error.message.includes('size')) {
          errorMessage = '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º: 25MB';
        } else if (error.message.includes('RLS') || error.message.includes('policy')) {
          errorMessage = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ';
        } else {
          errorMessage = error.message;
        }
      }
      
      toast({
        title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
        description: errorMessage,
        variant: "destructive",
      });
    }
  };

  const removeFile = () => {
    setSelectedFile(null);
    setUploadProgress(0);
  };

  const isUploading = uploadMutation.isPending;

  return (
    <div className="p-3 pb-16">
      <div className="bg-gradient-to-r from-green-400 to-blue-500 text-white p-4 rounded-lg mb-4">
        <h2 className="text-xl font-bold mb-1">–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä—é–∫</h2>
        <p className="opacity-90 text-sm">–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –ª—É—á—à–∏–º —Ç—Ä—é–∫–æ–º –∏ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏!</p>
      </div>

      {!user && (
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4 flex items-start gap-3">
          <AlertCircle className="w-5 h-5 text-yellow-600 mt-0.5 flex-shrink-0" />
          <div>
            <h4 className="font-semibold text-yellow-800 mb-1">–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h4>
            <p className="text-sm text-yellow-700">–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ Telegram –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ</p>
          </div>
        </div>
      )}

      <div className="space-y-4">
        {!selectedFile ? (
          <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
            <Upload className="w-10 h-10 text-gray-400 mx-auto mb-3" />
            <h3 className="text-lg font-semibold text-gray-700 mb-2">
              –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            </h3>
            <p className="text-gray-500 mb-3 text-sm">
              –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: MP4, MOV, AVI. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: <span className="font-semibold text-red-600">25MB</span>
            </p>
            <input
              ref={fileInputRef}
              type="file"
              accept="video/*"
              onChange={handleFileSelect}
              className="hidden"
              disabled={isUploading}
            />
            <Button 
              onClick={handleButtonClick}
              disabled={isUploading}
              className="bg-blue-600 hover:bg-blue-700"
            >
              –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª
            </Button>
          </div>
        ) : (
          <div className="bg-gray-50 rounded-lg p-3">
            <div className="flex items-center justify-between mb-3">
              <div className="flex items-center">
                <Video className="w-6 h-6 text-blue-600 mr-2" />
                <div>
                  <p className="font-semibold text-sm">{selectedFile.name}</p>
                  <p className="text-xs text-gray-500">
                    {(selectedFile.size / 1024 / 1024).toFixed(2)} MB
                  </p>
                </div>
              </div>
              <Button variant="ghost" size="sm" onClick={removeFile} disabled={isUploading}>
                <X className="w-4 h-4" />
              </Button>
            </div>
            
            {isUploading && uploadProgress > 0 && (
              <div className="w-full bg-gray-200 rounded-full h-2 mb-2">
                <div 
                  className="bg-blue-600 h-2 rounded-full transition-all duration-300" 
                  style={{ width: `${uploadProgress}%` }}
                ></div>
              </div>
            )}
          </div>
        )}

        <div className="space-y-3">
          <CategorySelector 
            selectedCategory={category}
            onCategoryChange={setCategory}
            disabled={isUploading}
          />

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä—é–∫–∞ *
            </label>
            <Input
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 360 Spin, Backflip, Grind..."
              className="w-full"
              disabled={isUploading}
              maxLength={100}
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –û–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            </label>
            <Textarea
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º —Ç—Ä—é–∫–µ..."
              className="w-full"
              rows={2}
              disabled={isUploading}
              maxLength={500}
            />
          </div>
        </div>

        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
          <h4 className="font-semibold text-yellow-800 mb-1 text-sm">–ü—Ä–∞–≤–∏–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏:</h4>
          <ul className="text-xs text-yellow-700 space-y-0.5">
            <li>‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 25MB</li>
            <li>‚Ä¢ –í–∏–¥–µ–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π</li>
            <li>‚Ä¢ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00</li>
            <li>‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω—ã –æ–ø–∞—Å–Ω—ã–µ —Ç—Ä—é–∫–∏ –±–µ–∑ –∑–∞—â–∏—Ç–Ω–æ–π —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏</li>
          </ul>
        </div>

        <Button
          onClick={handleUpload}
          disabled={!selectedFile || !title.trim() || isUploading || !user}
          className="w-full bg-gradient-to-r from-green-500 to-blue-600 hover:from-green-600 hover:to-blue-700"
        >
          {isUploading ? (
            <>
              <Loader2 className="w-4 h-4 mr-2 animate-spin" />
              –ó–∞–≥—Ä—É–∑–∫–∞... {uploadProgress}%
            </>
          ) : (
            '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä—é–∫'
          )}
        </Button>
      </div>
    </div>
  );
};

export default UploadVideo;
