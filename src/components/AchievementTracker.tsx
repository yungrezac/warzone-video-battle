
import React, { useEffect, useState } from 'react';
import { useAuth } from '@/components/AuthWrapper';
import { supabase } from '@/integrations/supabase/client';
import AchievementNotification from './AchievementNotification';
import { Achievement } from '@/hooks/useAchievements';

const AchievementTracker: React.FC = () => {
  const { user } = useAuth();
  const [newAchievement, setNewAchievement] = useState<Achievement | null>(null);
  const [showNotification, setShowNotification] = useState(false);

  useEffect(() => {
    if (!user?.id) return;

    console.log('üéØ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id);

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ user_achievements
    const channel = supabase
      .channel('achievement-updates')
      .on(
        'postgres_changes',
        {
          event: 'UPDATE',
          schema: 'public',
          table: 'user_achievements',
          filter: `user_id=eq.${user.id}`
        },
        async (payload) => {
          console.log('üèÜ –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', payload);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
          const newRecord = payload.new as any;
          const oldRecord = payload.old as any;
          
          if (newRecord.is_completed && !oldRecord.is_completed) {
            console.log('üéâ –ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!', newRecord.achievement_id);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
            try {
              const { data: achievement, error } = await supabase
                .from('achievements')
                .select('*')
                .eq('id', newRecord.achievement_id)
                .single();
              
              if (achievement && !error) {
                console.log('üèÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏:', achievement.title);
                setNewAchievement(achievement);
                setShowNotification(true);
              }
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', error);
            }
          }
        }
      )
      .subscribe();

    return () => {
      console.log('üîå –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
      supabase.removeChannel(channel);
    };
  }, [user?.id]);

  const handleCloseNotification = () => {
    console.log('‚ùå –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏');
    setShowNotification(false);
    setNewAchievement(null);
  };

  if (!newAchievement) return null;

  return (
    <AchievementNotification
      achievement={newAchievement}
      onClose={handleCloseNotification}
      isVisible={showNotification}
    />
  );
};

export default AchievementTracker;
