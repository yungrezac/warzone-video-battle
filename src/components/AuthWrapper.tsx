
import React, { createContext, useContext, useEffect, useState } from 'react';
import { supabase } from '@/integrations/supabase/client';

interface User {
  id: string;
  telegram_id: string;
  username?: string;
  first_name?: string;
  last_name?: string;
  avatar_url?: string;
  telegram_username?: string;
}

interface AuthContextType {
  user: User | null;
  loading: boolean;
  signOut: () => void;
  signIn: (userData: any) => void;
}

const AuthContext = createContext<AuthContextType>({
  user: null,
  loading: true,
  signOut: () => {},
  signIn: () => {},
});

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthWrapper');
  }
  return context;
};

interface AuthWrapperProps {
  children: React.ReactNode | ((props: { user: User | null; loading: boolean }) => React.ReactNode);
}

const AuthWrapper: React.FC<AuthWrapperProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    console.log('üîÑ AuthWrapper useEffect –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');
    
    const initializeUser = async () => {
      try {
        console.log('‚ö° –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const savedUser = localStorage.getItem('roller_tricks_user');
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', savedUser ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
        
        if (savedUser) {
          try {
            const userData = JSON.parse(savedUser);
            console.log('‚ö° –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData.username || userData.first_name);
            setUser(userData);
            setLoading(false);
            return;
          } catch (parseError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', parseError);
            localStorage.removeItem('roller_tricks_user');
          }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram WebApp
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–µ–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...');
        console.log('üì± Window –¥–æ—Å—Ç—É–ø–µ–Ω:', typeof window !== 'undefined');
        
        if (typeof window !== 'undefined') {
          console.log('üì± Telegram –æ–±—ä–µ–∫—Ç:', !!window.Telegram);
          console.log('üì± WebApp –æ–±—ä–µ–∫—Ç:', !!window.Telegram?.WebApp);
          
          if (window.Telegram?.WebApp) {
            console.log('‚úÖ Telegram WebApp –æ–±–Ω–∞—Ä—É–∂–µ–Ω');
            const tg = window.Telegram.WebApp;
            
            console.log('üöÄ –í—ã–∑—ã–≤–∞–µ–º tg.ready()...');
            tg.ready();
            
            console.log('üìä initDataUnsafe:', JSON.stringify(tg.initDataUnsafe, null, 2));
            
            // –†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            if (tg.expand) {
              console.log('üì± –†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
              tg.expand();
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (tg.initDataUnsafe?.user) {
              const telegramUser = tg.initDataUnsafe.user;
              console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram:', {
                id: telegramUser.id,
                first_name: telegramUser.first_name,
                username: telegramUser.username
              });
              
              console.log('üîÑ –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
              await createOrUpdateUser(telegramUser);
              return;
            } else {
              console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ initDataUnsafe');
              console.log('üîç –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç initDataUnsafe:', tg.initDataUnsafe);
              // –í—Å–µ —Ä–∞–≤–Ω–æ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –≤ Telegram –Ω–æ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
              console.log('üîß –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Telegram –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö');
              await createAdminUser();
              return;
            }
          } else {
            console.log('‚ùå Telegram WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞');
            await createAdminUser();
            return;
          }
        } else {
          console.log('‚ùå Window –æ–±—ä–µ–∫—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Å–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞');
          await createAdminUser();
          return;
        }

      } catch (err: any) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', err);
        console.error('üìã Stack trace:', err.stack);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ —Å–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
        await createAdminUser();
      } finally {
        console.log('‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, —É–±–∏—Ä–∞–µ–º loading');
        setLoading(false);
      }
    };

    const createOrUpdateUser = async (telegramUser: any) => {
      try {
        const telegramId = telegramUser.id.toString();
        console.log('üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID:', telegramId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        const { data: existingProfile, error: profileError } = await supabase
          .from('profiles')
          .select('*')
          .eq('telegram_id', telegramId)
          .maybeSingle();

        console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:', { –Ω–∞–π–¥–µ–Ω: !!existingProfile, –æ—à–∏–±–∫–∞: !!profileError });

        let profileId = existingProfile?.id;

        if (!existingProfile) {
          // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
          const newUserId = crypto.randomUUID();
          
          console.log('‚ûï –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å ID:', newUserId);
          
          const { data: newProfile, error: insertProfileError } = await supabase
            .from('profiles')
            .insert({
              id: newUserId,
              username: telegramUser.username || `user_${telegramUser.id}`,
              first_name: telegramUser.first_name,
              last_name: telegramUser.last_name,
              avatar_url: telegramUser.photo_url,
              telegram_id: telegramId,
              telegram_username: telegramUser.username,
              telegram_photo_url: telegramUser.photo_url,
            })
            .select()
            .single();

          if (insertProfileError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', insertProfileError);
            throw insertProfileError;
          }

          console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω');

          // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ user_points
          const { error: pointsError } = await supabase
            .from('user_points')
            .insert({
              user_id: newUserId,
              total_points: 0,
              wins_count: 0,
            });

          if (pointsError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è points:', pointsError);
          }

          profileId = newUserId;
        } else if (profileError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è:', profileError);
          throw profileError;
        } else {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Telegram
          console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å:', existingProfile.id);
          
          const { error: updateError } = await supabase
            .from('profiles')
            .update({
              username: telegramUser.username || existingProfile.username,
              first_name: telegramUser.first_name,
              last_name: telegramUser.last_name,
              avatar_url: telegramUser.photo_url || existingProfile.avatar_url,
              telegram_username: telegramUser.username,
              telegram_photo_url: telegramUser.photo_url,
            })
            .eq('id', existingProfile.id);

          if (updateError) console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', updateError);
          console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω');
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        const userData = {
          id: profileId,
          telegram_id: telegramId,
          username: telegramUser.username || `user_${telegramUser.id}`,
          first_name: telegramUser.first_name,
          last_name: telegramUser.last_name,
          avatar_url: telegramUser.photo_url,
          telegram_username: telegramUser.username,
        };

        console.log('‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData.username || userData.first_name);
        
        setUser(userData);
        localStorage.setItem('roller_tricks_user', JSON.stringify(userData));

      } catch (err: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:', err);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
        await createAdminUser();
      }
    };

    const createAdminUser = async () => {
      try {
        console.log('üëë –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–¥–º–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å
        const { data: existingAdmin, error: adminError } = await supabase
          .from('profiles')
          .select('*')
          .eq('username', 'TrickMaster')
          .maybeSingle();

        let adminId = existingAdmin?.id;

        if (!existingAdmin && (!adminError || adminError.code === 'PGRST116')) {
          // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
          const newAdminId = crypto.randomUUID();
          
          console.log('‚ûï –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å —Å ID:', newAdminId);
          
          const { data: newAdmin, error: insertAdminError } = await supabase
            .from('profiles')
            .insert({
              id: newAdminId,
              username: 'TrickMaster',
              first_name: 'Admin',
              last_name: 'Master',
              avatar_url: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face',
              telegram_id: 'admin_web',
              telegram_username: 'TrickMaster',
              telegram_photo_url: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face',
            })
            .select()
            .single();

          if (insertAdminError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:', insertAdminError);
            throw insertAdminError;
          }

          console.log('‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω:', newAdmin);

          // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ user_points
          const { error: pointsError } = await supabase
            .from('user_points')
            .insert({
              user_id: newAdminId,
              total_points: 99999,
              wins_count: 100,
            });

          if (pointsError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è points –¥–ª—è –∞–¥–º–∏–Ω–∞:', pointsError);
          }

          adminId = newAdminId;
        } else if (adminError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:', adminError);
          throw adminError;
        } else {
          adminId = existingAdmin.id;
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        const adminData = {
          id: adminId,
          telegram_id: 'admin_web',
          username: 'TrickMaster',
          first_name: 'Admin',
          last_name: 'Master',
          avatar_url: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face',
          telegram_username: 'TrickMaster',
        };

        console.log('‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω–∞:', adminData);
        
        setUser(adminData);
        localStorage.setItem('roller_tricks_user', JSON.stringify(adminData));

      } catch (err: any) {
        console.error('‚ùå Admin auth error:', err);
        // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const fallbackUser = {
          id: crypto.randomUUID(),
          telegram_id: 'fallback_user',
          username: 'User',
          first_name: 'Guest',
          last_name: 'User',
          avatar_url: '',
          telegram_username: 'User',
        };
        setUser(fallbackUser);
        localStorage.setItem('roller_tricks_user', JSON.stringify(fallbackUser));
      }
    };

    initializeUser();
  }, []);

  const signIn = (userData: any) => {
    console.log('üîê –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData.username || userData.first_name);
    setUser(userData);
    localStorage.setItem('roller_tricks_user', JSON.stringify(userData));
  };

  const signOut = () => {
    console.log('üö™ –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    setUser(null);
    localStorage.removeItem('roller_tricks_user');
  };

  const contextValue = { user, loading, signOut, signIn };

  return (
    <AuthContext.Provider value={contextValue}>
      {typeof children === 'function' ? children({ user, loading }) : children}
    </AuthContext.Provider>
  );
};

export default AuthWrapper;
