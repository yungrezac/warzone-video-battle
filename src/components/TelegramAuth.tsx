
import React, { useEffect, useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { Button } from '@/components/ui/button';
import { Loader2, Crown, CheckCircle } from 'lucide-react';
import { useAuth } from './AuthWrapper';
import { useTelegramWebApp } from '@/hooks/useTelegramWebApp';

interface TelegramUser {
  id: number;
  first_name: string;
  last_name?: string;
  username?: string;
  photo_url?: string;
  auth_date: number;
  hash: string;
}

const TelegramAuth: React.FC = () => {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { signIn } = useAuth();
  const { webApp, user, isReady, isTelegramWebApp } = useTelegramWebApp();

  useEffect(() => {
    console.log('üîê TelegramAuth –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ Telegram
    if (isReady && user && isTelegramWebApp) {
      console.log('üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.first_name);
      handleTelegramAuth(user as TelegramUser);
    } else if (isReady && !isTelegramWebApp) {
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –∫–∞–∫ –∞–¥–º–∏–Ω –µ—Å–ª–∏ –Ω–µ –≤ Telegram
      console.log('üîß –í—Ö–æ–¥ –≤–Ω–µ Telegram - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç');
      setTimeout(() => {
        handleAdminAuth();
      }, 1000);
    }
  }, [isReady, user, isTelegramWebApp]);

  const handleTelegramAuth = async (telegramUser: TelegramUser) => {
    setLoading(true);
    setError(null);

    try {
      console.log('üîê –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramUser.first_name);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ profiles
      const { data: existingProfile, error: profileError } = await supabase
        .from('profiles')
        .select('*')
        .eq('telegram_id', telegramUser.id.toString())
        .maybeSingle();

      let profileId = existingProfile?.id;

      if (!existingProfile && (!profileError || profileError.code === 'PGRST116')) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        const newUserId = crypto.randomUUID();
        
        console.log('‚ûï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å ID:', newUserId);
        
        const { data: newProfile, error: insertProfileError } = await supabase
          .from('profiles')
          .insert({
            id: newUserId,
            username: telegramUser.username || `user_${telegramUser.id}`,
            first_name: telegramUser.first_name,
            last_name: telegramUser.last_name,
            avatar_url: telegramUser.photo_url,
            telegram_id: telegramUser.id.toString(),
            telegram_username: telegramUser.username,
            telegram_photo_url: telegramUser.photo_url,
          })
          .select()
          .single();

        if (insertProfileError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', insertProfileError);
          throw insertProfileError;
        }

        console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω:', newProfile);

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ user_points
        const { error: pointsError } = await supabase
          .from('user_points')
          .insert({
            user_id: newUserId,
            total_points: 0,
            wins_count: 0,
          });

        if (pointsError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è points:', pointsError);
        }

        profileId = newUserId;
      } else if (profileError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ—Ñ–∏–ª—è:', profileError);
        throw profileError;
      } else if (existingProfile) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const { error: updateError } = await supabase
          .from('profiles')
          .update({
            username: telegramUser.username || existingProfile.username,
            first_name: telegramUser.first_name,
            last_name: telegramUser.last_name,
            avatar_url: telegramUser.photo_url || existingProfile.avatar_url,
            telegram_username: telegramUser.username,
            telegram_photo_url: telegramUser.photo_url,
          })
          .eq('id', existingProfile.id);

        if (updateError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', updateError);
        }
        
        profileId = existingProfile.id;
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      const userData = {
        id: profileId,
        telegram_id: telegramUser.id.toString(),
        username: telegramUser.username || `user_${telegramUser.id}`,
        first_name: telegramUser.first_name,
        last_name: telegramUser.last_name,
        avatar_url: telegramUser.photo_url,
        telegram_username: telegramUser.username,
      };

      console.log('‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
      
      signIn(userData);

    } catch (err: any) {
      console.error('‚ùå Telegram auth error:', err);
      setError(err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    } finally {
      setLoading(false);
    }
  };

  const handleAdminAuth = async () => {
    setLoading(true);
    setError(null);
    
    try {
      console.log('üëë –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –≤–Ω–µ Telegram');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–¥–º–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å
      const { data: existingAdmin, error: adminError } = await supabase
        .from('profiles')
        .select('*')
        .eq('username', 'TrickMaster')
        .maybeSingle();

      let adminId = existingAdmin?.id;

      if (!existingAdmin && (!adminError || adminError.code === 'PGRST116')) {
        // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        const newAdminId = crypto.randomUUID();
        
        console.log('‚ûï –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å —Å ID:', newAdminId);
        
        const { data: newAdmin, error: insertAdminError } = await supabase
          .from('profiles')
          .insert({
            id: newAdminId,
            username: 'TrickMaster',
            first_name: 'Admin',
            last_name: 'Master',
            avatar_url: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face',
            telegram_id: 'admin_web',
            telegram_username: 'TrickMaster',
            telegram_photo_url: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face',
            is_premium: true,
          })
          .select()
          .single();

        if (insertAdminError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:', insertAdminError);
          throw insertAdminError;
        }

        console.log('‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω:', newAdmin);

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ user_points
        const { error: pointsError } = await supabase
          .from('user_points')
          .insert({
            user_id: newAdminId,
            total_points: 99999,
            wins_count: 100,
          });

        if (pointsError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è points –¥–ª—è –∞–¥–º–∏–Ω–∞:', pointsError);
        }

        adminId = newAdminId;
      } else if (adminError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:', adminError);
        throw adminError;
      } else {
        adminId = existingAdmin.id;
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      const adminData = {
        id: adminId,
        telegram_id: 'admin_web',
        username: 'TrickMaster',
        first_name: 'Admin',
        last_name: 'Master',
        avatar_url: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face',
        telegram_username: 'TrickMaster',
      };

      console.log('‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–¥–º–∏–Ω–∞:', adminData);
      
      signIn(adminData);

    } catch (err: any) {
      console.error('‚ùå Admin auth error:', err);
      setError(err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞');
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-600 to-purple-600 flex items-center justify-center">
        <div className="bg-white rounded-lg p-8 text-center">
          <Loader2 className="w-8 h-8 animate-spin mx-auto mb-4" />
          <p className="text-gray-600">–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-600 to-purple-600 flex items-center justify-center p-4">
      <div className="bg-white rounded-lg shadow-xl p-8 w-full max-w-md text-center">
        <div className="mb-6">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">TRICKS</h1>
          <p className="text-gray-600">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Ç—Ä—é–∫–æ–≤!</p>
        </div>

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}

        <div className="space-y-4">
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 text-sm">
            <h4 className="font-semibold text-blue-800 mb-2">–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</h4>
            <div className="text-blue-700 space-y-1">
              <div className="flex items-center justify-between">
                <span>Telegram WebApp:</span>
                {isTelegramWebApp ? (
                  <CheckCircle className="w-4 h-4 text-green-500" />
                ) : (
                  <span className="text-orange-500">–ë—Ä–∞—É–∑–µ—Ä</span>
                )}
              </div>
              {user && (
                <div className="flex items-center justify-between">
                  <span>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</span>
                  <span className="text-green-600">{user.first_name}</span>
                </div>
              )}
            </div>
          </div>

          {!isTelegramWebApp && (
            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
              <div className="flex items-center gap-2 mb-2">
                <Crown className="w-5 h-5 text-yellow-600" />
                <h4 className="font-semibold text-yellow-800">–î–µ–º–æ —Ä–µ–∂–∏–º</h4>
              </div>
              <p className="text-yellow-700 text-sm mb-3">
                –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—é. –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram.
              </p>
              <Button 
                onClick={handleAdminAuth}
                className="w-full bg-yellow-500 hover:bg-yellow-600 text-white"
                disabled={loading}
              >
                <Crown className="w-4 h-4 mr-2" />
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–∞–∫ –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
              </Button>
            </div>
          )}

          <p className="text-xs text-gray-500">
            {isTelegramWebApp 
              ? '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ'
              : '–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram Mini App'
            }
          </p>
        </div>
      </div>
    </div>
  );
};

export default TelegramAuth;
