import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/components/AuthWrapper';
import { generateQuickThumbnail } from '@/utils/videoOptimization';

interface Video {
  id: string;
  title: string;
  video_url: string;
  thumbnail_url?: string;
  user_id: string;
  category: 'Rollers' | 'BMX' | 'Skateboard';
  views: number;
  likes_count: number; // This will be overridden by our direct count
  comments_count: number;
  created_at: string;
  user_liked: boolean;
  profiles?: {
    username?: string;
    first_name?: string;
    last_name?: string;
    telegram_username?: string;
    avatar_url?: string;
    is_premium?: boolean;
  };
  // This property comes from the videos table, might be used as a fallback or if is_winner logic changes
  is_winner?: boolean; 
}

interface UploadVideoParams {
  title: string;
  description?: string;
  videoFile: File;
  category: 'Rollers' | 'BMX' | 'Skateboard';
  thumbnailBlob?: Blob;
  trimStart?: number;
  trimEnd?: number;
  onProgress?: (progress: number) => void;
}

export const useVideos = () => {
  const { user } = useAuth();

  return useQuery({
    queryKey: ['videos', user?.id],
    queryFn: async () => {
      console.log('üìπ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –¥–ª—è –ª–µ–Ω—Ç—ã...');

      // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –≤–∏–¥–µ–æ —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const { data: videos, error } = await supabase
        .from('videos')
        .select(`
          *,
          profiles:user_id (
            username,
            first_name,
            last_name,
            telegram_username,
            avatar_url,
            is_premium
          )
        `)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:', error);
        throw error;
      }

      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–∏–¥–µ–æ (–Ω–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ):', videos?.length);

      if (!videos || videos.length === 0) {
        return [];
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const videosWithStats = await Promise.all(
        videos.map(async (video) => {
          try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let userLiked = false;

            if (user?.id) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∞–π–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              const { data: userLikeData } = await supabase
                .from('video_likes')
                .select('*')
                .eq('video_id', video.id)
                .eq('user_id', user.id)
                .maybeSingle();
              userLiked = !!userLikeData;
            }

            // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –¥–ª—è –≤–∏–¥–µ–æ
            const { count: totalLikes, error: likesError } = await supabase
              .from('video_likes')
              .select('*', { count: 'exact', head: true }) // head: true –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
              .eq('video_id', video.id);

            if (likesError) {
              console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∞–π–∫–æ–≤ –¥–ª—è –≤–∏–¥–µ–æ ${video.id}:`, likesError);
            }
            
            // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –≤–∏–¥–µ–æ
            const { count: totalComments, error: commentsError } = await supabase
              .from('video_comments')
              .select('*', { count: 'exact', head: true })
              .eq('video_id', video.id);

            if (commentsError) {
              console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –≤–∏–¥–µ–æ ${video.id}:`, commentsError);
            }

            return {
              ...video,
              likes_count: totalLikes || video.likes_count || 0, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∑–∞—Ç–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã, –∑–∞—Ç–µ–º 0
              comments_count: totalComments || video.comments_count || 0, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∑–∞—Ç–µ–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã, –∑–∞—Ç–µ–º 0
              user_liked: userLiked,
            };
          } catch (statError) {
            console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ ${video.id}:`, statError);
            return {
              ...video, // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ —Å –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
              user_liked: false,
              // likes_count –∏ comments_count –æ—Å—Ç–∞—é—Ç—Å—è –∏–∑ video, –µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º –µ—Å—Ç—å
            };
          }
        })
      );

      console.log('‚úÖ –í–∏–¥–µ–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      return videosWithStats;
    },
  });
};

export const useVideo = (id: string) => {
  return useQuery({
    queryKey: ['videos', id],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('videos')
        .select('*')
        .eq('id', id)
        .single();

      if (error) {
        throw error;
      }

      return data;
    },
  });
};

export const useUploadVideo = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();

  return useMutation({
    mutationFn: async (params: UploadVideoParams) => {
      if (!user?.id) {
        throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }

      const { title, description, videoFile, category, thumbnailBlob, trimStart, trimEnd, onProgress } = params;
      
      console.log('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ:', {
        userId: user.id,
        title,
        category,
        originalSize: `${(videoFile.size / 1024 / 1024).toFixed(2)}MB`
      });

      onProgress?.(5);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –±–µ–∑ —Å–∂–∞—Ç–∏—è
      let finalVideoFile = videoFile;
      let finalThumbnailBlob = thumbnailBlob;
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
      if (!finalThumbnailBlob) {
        try {
          console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é...');
          finalThumbnailBlob = await generateQuickThumbnail(videoFile);
        } catch (error) {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–≤—å—é:', error);
        }
      }

      onProgress?.(20);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      const fileExtension = videoFile.name.split('.').pop() || 'mp4';
      const videoFileName = `${user.id}/${Date.now()}_original.${fileExtension}`;
      
      try {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ...');
        const { data: videoUpload, error: videoError } = await supabase.storage
          .from('videos')
          .upload(videoFileName, finalVideoFile, {
            cacheControl: '3600',
            upsert: false,
          });

        if (videoError) {
          throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: ${videoError.message}`);
        }

        onProgress?.(60);

        const { data: videoUrlData } = supabase.storage
          .from('videos')
          .getPublicUrl(videoFileName);
          
        const videoUrl = videoUrlData.publicUrl;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–≤—å—é –µ—Å–ª–∏ –µ—Å—Ç—å
        let thumbnailUrl = null;
        if (finalThumbnailBlob) {
          console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–≤—å—é...');
          const thumbnailFileName = `${user.id}/${Date.now()}_thumb.jpg`;
          const { data: thumbnailUpload, error: thumbnailError } = await supabase.storage
            .from('videos')
            .upload(thumbnailFileName, finalThumbnailBlob, {
              cacheControl: '3600',
              upsert: false,
            });

          if (!thumbnailError) {
            const { data: thumbnailUrlData } = supabase.storage
              .from('videos')
              .getPublicUrl(thumbnailFileName);
            thumbnailUrl = thumbnailUrlData.publicUrl;
          }
        }

        onProgress?.(80);

        console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
        const { data: videoRecord, error: dbError } = await supabase
          .from('videos')
          .insert({
            title,
            description,
            video_url: videoUrl,
            thumbnail_url: thumbnailUrl,
            user_id: user.id,
            category,
            views: 0,
            likes_count: 0,
            comments_count: 0,
          })
          .select()
          .single();

        if (dbError) {
          throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${dbError.message}`);
        }

        onProgress?.(100);

        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ - –±–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä—ã');
        return videoRecord;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:', error);
        
        // –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try {
          await supabase.storage.from('videos').remove([videoFileName]);
        } catch (cleanupError) {
          console.warn('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤:', cleanupError);
        }
        
        throw error;
      }
    },
    onSuccess: () => {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫—ç—à–∏ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      queryClient.invalidateQueries({ queryKey: ['videos'] });
      queryClient.invalidateQueries({ queryKey: ['user-videos'] });
      queryClient.invalidateQueries({ queryKey: ['user-profile'] });
      queryClient.invalidateQueries({ queryKey: ['video-feed'] });
    },
    onError: (error) => {
      console.error('–û—à–∏–±–∫–∞ –º—É—Ç–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
    },
  });
};
