import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/components/AuthWrapper';
import { useTelegramNotifications } from './useTelegramNotifications';

interface Video {
  id: string;
  created_at: string;
  title: string;
  video_url: string;
  thumbnail_url: string;
  user_id: string;
  likes_count: number;
  comments_count: number;
  average_rating: number;
  views: number;
  is_winner: boolean;
  user_liked: boolean;
  user_rating: number;
  category: 'Rollers' | 'BMX' | 'Skateboard';
  profiles?: {
    username?: string;
    telegram_username?: string;
    avatar_url?: string;
  };
}

interface VideoLike {
  video_id: string;
  user_id: string;
}

interface VideoRating {
  video_id: string;
  user_id: string;
  rating: number;
}

interface UploadVideoParams {
  title: string;
  description?: string;
  videoFile: File;
  category: 'Rollers' | 'BMX' | 'Skateboard';
  thumbnailBlob?: Blob;
  trimStart?: number;
  trimEnd?: number;
  onProgress?: (progress: number) => void;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é –∏–∑ –≤–∏–¥–µ–æ
const generateThumbnailFromVideo = (videoFile: File): Promise<Blob> => {
  return new Promise((resolve, reject) => {
    const video = document.createElement('video');
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    
    if (!ctx) {
      reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å canvas context'));
      return;
    }

    video.preload = 'metadata';
    video.muted = true;
    
    video.onloadedmetadata = () => {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É –∏–ª–∏ —Å–µ—Ä–µ–¥–∏–Ω—É –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –æ–Ω–æ –∫–æ—Ä–æ—á–µ
      const time = Math.min(1, video.duration / 2);
      video.currentTime = time;
    };
    
    video.onseeked = () => {
      try {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä canvas
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        
        // –†–∏—Å—É–µ–º –∫–∞–¥—Ä –∏–∑ –≤–∏–¥–µ–æ –Ω–∞ canvas
        ctx.drawImage(video, 0, 0);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º canvas –≤ blob
        canvas.toBlob((blob) => {
          if (blob) {
            resolve(blob);
          } else {
            reject(new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–≤—å—é'));
          }
        }, 'image/jpeg', 0.8);
      } catch (error) {
        reject(error);
      }
    };
    
    video.onerror = () => {
      reject(new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é'));
    };
    
    // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –≤–∏–¥–µ–æ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
    const videoUrl = URL.createObjectURL(videoFile);
    video.src = videoUrl;
    
    // –û—á–∏—â–∞–µ–º URL –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    video.onloadstart = () => {
      URL.revokeObjectURL(videoUrl);
    };
  });
};

export const useVideos = () => {
  const { user } = useAuth();

  return useQuery({
    queryKey: ['videos', user?.id],
    queryFn: async () => {
      console.log('üé¨ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user?.id);

      const { data: videos, error } = await supabase
        .from('videos')
        .select(`
          *,
          profiles:user_id (
            id,
            username,
            telegram_username,
            avatar_url
          )
        `)
        .order('created_at', { ascending: false });

      if (error) throw error;

      if (!videos) return [];

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
      const videosWithStats = await Promise.all(
        videos.map(async (video) => {
          // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∞–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
          const { count: likesCount } = await supabase
            .from('video_likes')
            .select('*', { count: 'exact' })
            .eq('video_id', video.id);

          // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
          const { count: commentsCount } = await supabase
            .from('video_comments')
            .select('*', { count: 'exact' })
            .eq('video_id', video.id);

          // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
          const { data: ratings } = await supabase
            .from('video_ratings')
            .select('rating')
            .eq('video_id', video.id);

          const averageRating = ratings && ratings.length > 0
            ? ratings.reduce((sum, r) => sum + r.rating, 0) / ratings.length
            : 0;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª–∞–π–∫–Ω—É–ª –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ –≤–∏–¥–µ–æ –∏ –µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
          let userLike = null;
          let userRatingData = null;

          if (user?.id) {
            const { data: likeData } = await supabase
              .from('video_likes')
              .select('*')
              .eq('video_id', video.id)
              .eq('user_id', user.id)
              .maybeSingle();

            const { data: ratingData } = await supabase
              .from('video_ratings')
              .select('rating')
              .eq('video_id', video.id)
              .eq('user_id', user.id)
              .maybeSingle();

            userLike = likeData;
            userRatingData = ratingData;
          }

          console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–¥–µ–æ ${video.id}:`, {
            likes: likesCount,
            comments: commentsCount,
            avgRating: averageRating,
            userLiked: !!userLike,
            userRating: userRatingData?.rating || 0
          });

          return {
            ...video,
            likes_count: likesCount || 0,
            comments_count: commentsCount || 0,
            average_rating: Number(averageRating.toFixed(1)),
            user_liked: !!userLike,
            user_rating: userRatingData?.rating || 0,
          };
        })
      );

      console.log('‚úÖ –í–∏–¥–µ–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', videosWithStats.length);
      return videosWithStats;
    },
  });
};

export const useUploadVideo = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();

  return useMutation({
    mutationFn: async (params: UploadVideoParams) => {
      if (!user?.id) {
        throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }

      const { title, description, videoFile, category, thumbnailBlob, trimStart, trimEnd, onProgress } = params;
      
      console.log('üé¨ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ:', {
        userId: user.id,
        title,
        category,
        fileSize: `${(videoFile.size / 1024 / 1024).toFixed(2)}MB`
      });

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
      const videoFileName = `${user.id}/${Date.now()}_${videoFile.name}`;
      let finalThumbnailBlob = thumbnailBlob;

      try {
        onProgress?.(10);

        // –ï—Å–ª–∏ –ø—Ä–µ–≤—å—é –Ω–µ –±—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        if (!thumbnailBlob) {
          console.log('üñºÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...');
          try {
            finalThumbnailBlob = await generateThumbnailFromVideo(videoFile);
            console.log('‚úÖ –ü—Ä–µ–≤—å—é —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
          } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–≤—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:', error);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–µ–≤—å—é
          }
        }

        onProgress?.(25);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª
        console.log('üìπ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª...');
        const { data: videoUpload, error: videoError } = await supabase.storage
          .from('videos')
          .upload(videoFileName, videoFile, {
            cacheControl: '3600',
            upsert: false,
          });

        if (videoError) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:', videoError);
          throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: ${videoError.message}`);
        }

        onProgress?.(50);

        // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL –¥–ª—è –≤–∏–¥–µ–æ
        const { data: videoUrlData } = supabase.storage
          .from('videos')
          .getPublicUrl(videoFileName);

        let thumbnailUrl = null;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–≤—å—é, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (finalThumbnailBlob) {
          console.log('üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–≤—å—é...');
          const thumbnailFileName = `${user.id}/${Date.now()}_thumbnail.jpg`;
          
          const { data: thumbnailUpload, error: thumbnailError } = await supabase.storage
            .from('videos')
            .upload(thumbnailFileName, finalThumbnailBlob, {
              cacheControl: '3600',
              upsert: false,
            });

          if (thumbnailError) {
            console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é:', thumbnailError);
          } else {
            const { data: thumbnailUrlData } = supabase.storage
              .from('videos')
              .getPublicUrl(thumbnailFileName);
            thumbnailUrl = thumbnailUrlData.publicUrl;
          }
        }

        onProgress?.(75);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
        const { data: videoRecord, error: dbError } = await supabase
          .from('videos')
          .insert({
            title,
            description,
            video_url: videoUrlData.publicUrl,
            thumbnail_url: thumbnailUrl,
            user_id: user.id,
            category,
            views: 0,
            likes_count: 0,
            comments_count: 0,
          })
          .select()
          .single();

        if (dbError) {
          console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î:', dbError);
          throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${dbError.message}`);
        }

        onProgress?.(90);

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          await supabase.rpc('update_achievement_progress', { 
            p_user_id: user.id,
            p_category: 'videos_uploaded',
            p_increment: 1
          });
        } catch (error) {
          console.warn('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –≤–∏–¥–µ–æ:', error);
        }

        onProgress?.(100);

        console.log('‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', videoRecord);
        return videoRecord;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:', error);
        
        // –û—á–∏—â–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try {
          await supabase.storage.from('videos').remove([videoFileName]);
        } catch (cleanupError) {
          console.warn('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤:', cleanupError);
        }
        
        throw error;
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['videos'] });
      queryClient.invalidateQueries({ queryKey: ['user-videos'] });
    },
    onError: (error) => {
      console.error('–û—à–∏–±–∫–∞ –º—É—Ç–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:', error);
    },
  });
};

export const useLikeVideo = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const { sendLikeNotification } = useTelegramNotifications();

  return useMutation({
    mutationFn: async ({ videoId, isLiked }: { videoId: string; isLiked: boolean }) => {
      if (!user?.id) {
        throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }

      console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∞–π–∫:', { videoId, isLiked, userId: user.id });

      if (isLiked) {
        // –£–±–∏—Ä–∞–µ–º –ª–∞–π–∫
        console.log('‚ùå –£–±–∏—Ä–∞–µ–º –ª–∞–π–∫...');
        const { error } = await supabase
          .from('video_likes')
          .delete()
          .eq('video_id', videoId)
          .eq('user_id', user.id);

        if (error) throw error;

        // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        await supabase.rpc('decrement_likes_count', { video_id: videoId });
        console.log('‚úÖ –õ–∞–π–∫ —É–±—Ä–∞–Ω, —Å—á–µ—Ç—á–∏–∫ —É–º–µ–Ω—å—à–µ–Ω');
      } else {
        // –°—Ç–∞–≤–∏–º –ª–∞–π–∫
        console.log('‚ù§Ô∏è –°—Ç–∞–≤–∏–º –ª–∞–π–∫...');
        const { error } = await supabase
          .from('video_likes')
          .insert({
            video_id: videoId,
            user_id: user.id,
          });

        if (error) throw error;

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        await supabase.rpc('increment_likes_count', { video_id: videoId });
        console.log('‚úÖ –õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω, —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –≤–∏–¥–µ–æ
        try {
          const { data: videoData } = await supabase
            .from('videos')
            .select(`
              title,
              user_id,
              profiles!inner(telegram_id, username, telegram_username)
            `)
            .eq('id', videoId)
            .single();

          if (videoData && videoData.profiles && videoData.user_id !== user.id) {
            const ownerTelegramId = videoData.profiles.telegram_id;
            const likerName = user.username || user.telegram_username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            
            if (ownerTelegramId) {
              await sendLikeNotification(
                videoData.user_id,
                ownerTelegramId,
                likerName,
                videoData.title
              );
            }
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∞–π–∫–µ:', error);
        }
      }

      const newIsLiked = !isLiked;
      console.log('üèÅ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –ª–∞–π–∫–∞. –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', newIsLiked);
      return { videoId, isLiked: newIsLiked };
    },
    onSuccess: (data) => {
      console.log('‚úÖ –ú—É—Ç–∞—Ü–∏—è –ª–∞–π–∫–∞ —É—Å–ø–µ—à–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∑–∞–ø—Ä–æ—Å–æ–≤...');
      queryClient.invalidateQueries({ queryKey: ['videos'] });
      queryClient.invalidateQueries({ queryKey: ['user-videos'] });
    },
    onError: (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∞–π–∫–∞:', error);
    },
  });
};

export const useRateVideo = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();

  return useMutation({
    mutationFn: async ({ videoId, rating }: { videoId: string; rating: number }) => {
      if (!user?.id) {
        throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }

      console.log('‚≠ê –°—Ç–∞–≤–∏–º —Ä–µ–π—Ç–∏–Ω–≥:', { videoId, rating, userId: user.id });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: existingRating } = await supabase
        .from('video_ratings')
        .select('*')
        .eq('video_id', videoId)
        .eq('user_id', user.id)
        .maybeSingle();

      if (existingRating) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
        const { error } = await supabase
          .from('video_ratings')
          .update({ rating, updated_at: new Date().toISOString() })
          .eq('id', existingRating.id);

        if (error) throw error;
        console.log('‚úÖ –†–µ–π—Ç–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω');
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        const { error } = await supabase
          .from('video_ratings')
          .insert({
            video_id: videoId,
            user_id: user.id,
            rating,
          });

        if (error) throw error;
        console.log('‚úÖ –†–µ–π—Ç–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω');
      }

      return { videoId, rating };
    },
    onSuccess: () => {
      console.log('‚úÖ –ú—É—Ç–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∑–∞–ø—Ä–æ—Å–æ–≤...');
      queryClient.invalidateQueries({ queryKey: ['videos'] });
      queryClient.invalidateQueries({ queryKey: ['user-videos'] });
    },
    onError: (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
    },
  });
};
