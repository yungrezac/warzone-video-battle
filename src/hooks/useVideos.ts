import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/components/AuthWrapper';
import { generateQuickThumbnail } from '@/utils/videoOptimization';

interface Video {
  id: string;
  title: string;
  video_url: string;
  thumbnail_url?: string;
  user_id: string;
  category: 'Rollers' | 'BMX' | 'Skateboard';
  views: number;
  likes_count: number;
  comments_count: number;
  created_at: string;
  is_winner?: boolean;
  average_rating: number;
  user_liked: boolean;
  user_rating: number;
  profiles?: {
    username?: string;
    first_name?: string;
    last_name?: string;
    telegram_username?: string;
    avatar_url?: string;
  };
}

interface RateVideoParams {
  videoId: string;
  rating: number;
}

interface UploadVideoParams {
  title: string;
  description?: string;
  videoFile: File;
  category: 'Rollers' | 'BMX' | 'Skateboard';
  thumbnailBlob?: Blob;
  trimStart?: number;
  trimEnd?: number;
  onProgress?: (progress: number) => void;
}

export const useVideos = () => {
  const { user } = useAuth();

  return useQuery({
    queryKey: ['videos', user?.id],
    queryFn: async () => {
      console.log('üìπ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –¥–ª—è –ª–µ–Ω—Ç—ã...');

      // –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –≤–∏–¥–µ–æ —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const { data: videos, error } = await supabase
        .from('videos')
        .select(`
          *,
          profiles:user_id (
            username,
            first_name,
            last_name,
            telegram_username,
            avatar_url
          )
        `)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:', error);
        throw error;
      }

      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–∏–¥–µ–æ:', videos?.length);

      if (!videos || videos.length === 0) {
        return [];
      }

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –ª–∞–π–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
      const { data: likesData, error: likesError } = await supabase
        .from('video_likes')
        .select('video_id')
        .in('video_id', videos.map(v => v.id));

      if (likesError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∞–π–∫–æ–≤:', likesError);
      }

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∞–π–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
      const likesCounts: { [key: string]: number } = {};
      if (likesData) {
        likesData.forEach(like => {
          likesCounts[like.video_id] = (likesCounts[like.video_id] || 0) + 1;
        });
      }

      console.log('üìä –ü–æ–¥—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ª–∞–π–∫–∏:', likesCounts);

      // –ü–æ–ª—É—á–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–µ–æ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
      let userLikes: { [key: string]: boolean } = {};
      let userRatings: { [key: string]: number } = {};

      if (user?.id) {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∞–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        const { data: userLikesData } = await supabase
          .from('video_likes')
          .select('video_id')
          .eq('user_id', user.id)
          .in('video_id', videos.map(v => v.id));

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        userLikes = (userLikesData || []).reduce((acc, like) => {
          acc[like.video_id] = true;
          return acc;
        }, {} as { [key: string]: boolean });

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        const { data: ratingsData } = await supabase
          .from('video_ratings')
          .select('video_id, rating')
          .eq('user_id', user.id)
          .in('video_id', videos.map(v => v.id));

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        userRatings = (ratingsData || []).reduce((acc, rating) => {
          acc[rating.video_id] = rating.rating;
          return acc;
        }, {} as { [key: string]: number });
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–µ–æ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
      const { data: allRatings } = await supabase
        .from('video_ratings')
        .select('video_id, rating')
        .in('video_id', videos.map(v => v.id));

      // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
      const averageRatings: { [key: string]: number } = {};
      if (allRatings) {
        const ratingsByVideo = allRatings.reduce((acc, rating) => {
          if (!acc[rating.video_id]) {
            acc[rating.video_id] = [];
          }
          acc[rating.video_id].push(rating.rating);
          return acc;
        }, {} as { [key: string]: number[] });

        Object.keys(ratingsByVideo).forEach(videoId => {
          const ratings = ratingsByVideo[videoId];
          averageRatings[videoId] = ratings.reduce((sum, r) => sum + r, 0) / ratings.length;
        });
      }

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
      const videosWithStats = videos.map(video => {
        const actualLikesCount = likesCounts[video.id] || 0;
        console.log(`üé¨ –í–∏–¥–µ–æ ${video.id}: –ª–∞–π–∫–æ–≤ –≤ –ë–î = ${actualLikesCount}, –≤ —Ç–∞–±–ª–∏—Ü–µ = ${video.likes_count}`);
        
        return {
          ...video,
          user_liked: userLikes[video.id] || false,
          user_rating: userRatings[video.id] || 0,
          average_rating: Number((averageRatings[video.id] || 0).toFixed(1)),
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –ª–∞–π–∫–æ–≤ –≤–º–µ—Å—Ç–æ cached –∑–Ω–∞—á–µ–Ω–∏—è
          likes_count: actualLikesCount,
          comments_count: video.comments_count || 0,
        };
      });

      console.log('‚úÖ –í–∏–¥–µ–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      return videosWithStats;
    },
  });
};

export const useVideo = (id: string) => {
  return useQuery({
    queryKey: ['videos', id],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('videos')
        .select('*')
        .eq('id', id)
        .single();

      if (error) {
        throw error;
      }

      return data;
    },
  });
};

export const useRateVideo = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();

  return useMutation({
    mutationFn: async ({ videoId, rating }: RateVideoParams) => {
      if (!user?.id) {
        throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }

      console.log('‚≠ê –û—Ü–µ–Ω–∏–≤–∞–µ–º –≤–∏–¥–µ–æ:', { videoId, rating });

      // Upsert the rating
      const { error } = await supabase
        .from('video_ratings')
        .upsert({ video_id: videoId, user_id: user.id, rating: rating }, { onConflict: 'video_id,user_id' });

      if (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
        throw new Error(error.message);
      }

      console.log('‚úÖ –†–µ–π—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω');
    },
    onSuccess: (_, { videoId }) => {
      console.log('‚úÖ useRateVideo —É—Å–ø–µ—à–Ω–æ, –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à...');
      queryClient.invalidateQueries({ queryKey: ['videos', videoId] });
      queryClient.invalidateQueries({ queryKey: ['videos'] });
      queryClient.invalidateQueries({ queryKey: ['user-videos'] });
      queryClient.invalidateQueries({ queryKey: ['video-feed'] });
    },
    onError: (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º—É—Ç–∞—Ü–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞:', error);
    },
  });
};

export const useUploadVideo = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();

  return useMutation({
    mutationFn: async (params: UploadVideoParams) => {
      if (!user?.id) {
        throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }

      const { title, description, videoFile, category, thumbnailBlob, trimStart, trimEnd, onProgress } = params;
      
      console.log('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ:', {
        userId: user.id,
        title,
        category,
        originalSize: `${(videoFile.size / 1024 / 1024).toFixed(2)}MB`
      });

      onProgress?.(5);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –±–µ–∑ —Å–∂–∞—Ç–∏—è
      let finalVideoFile = videoFile;
      let finalThumbnailBlob = thumbnailBlob;
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é –µ—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
      if (!finalThumbnailBlob) {
        try {
          console.log('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é...');
          finalThumbnailBlob = await generateQuickThumbnail(videoFile);
        } catch (error) {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–≤—å—é:', error);
        }
      }

      onProgress?.(20);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
      const fileExtension = videoFile.name.split('.').pop() || 'mp4';
      const videoFileName = `${user.id}/${Date.now()}_original.${fileExtension}`;
      
      try {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ...');
        const { data: videoUpload, error: videoError } = await supabase.storage
          .from('videos')
          .upload(videoFileName, finalVideoFile, {
            cacheControl: '3600',
            upsert: false,
          });

        if (videoError) {
          throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: ${videoError.message}`);
        }

        onProgress?.(60);

        const { data: videoUrlData } = supabase.storage
          .from('videos')
          .getPublicUrl(videoFileName);
          
        const videoUrl = videoUrlData.publicUrl;

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–≤—å—é –µ—Å–ª–∏ –µ—Å—Ç—å
        let thumbnailUrl = null;
        if (finalThumbnailBlob) {
          console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–≤—å—é...');
          const thumbnailFileName = `${user.id}/${Date.now()}_thumb.jpg`;
          const { data: thumbnailUpload, error: thumbnailError } = await supabase.storage
            .from('videos')
            .upload(thumbnailFileName, finalThumbnailBlob, {
              cacheControl: '3600',
              upsert: false,
            });

          if (!thumbnailError) {
            const { data: thumbnailUrlData } = supabase.storage
              .from('videos')
              .getPublicUrl(thumbnailFileName);
            thumbnailUrl = thumbnailUrlData.publicUrl;
          }
        }

        onProgress?.(80);

        console.log('–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
        const { data: videoRecord, error: dbError } = await supabase
          .from('videos')
          .insert({
            title,
            description,
            video_url: videoUrl,
            thumbnail_url: thumbnailUrl,
            user_id: user.id,
            category,
            views: 0,
            likes_count: 0,
            comments_count: 0,
          })
          .select()
          .single();

        if (dbError) {
          throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${dbError.message}`);
        }

        onProgress?.(100);

        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ - –±–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä—ã');
        return videoRecord;
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:', error);
        
        // –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try {
          await supabase.storage.from('videos').remove([videoFileName]);
        } catch (cleanupError) {
          console.warn('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤:', cleanupError);
        }
        
        throw error;
      }
    },
    onSuccess: () => {
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫—ç—à–∏ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      queryClient.invalidateQueries({ queryKey: ['videos'] });
      queryClient.invalidateQueries({ queryKey: ['user-videos'] });
      queryClient.invalidateQueries({ queryKey: ['user-profile'] });
      queryClient.invalidateQueries({ queryKey: ['video-feed'] });
    },
    onError: (error) => {
      console.error('–û—à–∏–±–∫–∞ –º—É—Ç–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
    },
  });
};
