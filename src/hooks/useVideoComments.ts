
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';

export const useVideoComments = (videoId: string) => {
  return useQuery({
    queryKey: ['video-comments', videoId],
    queryFn: async () => {
      console.log('üì• useVideoComments: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –≤–∏–¥–µ–æ:', videoId);

      const { data, error } = await supabase
        .from('video_comments')
        .select(`
          id,
          content,
          created_at,
          user_id,
          profiles:user_id (
            username,
            telegram_username,
            avatar_url
          )
        `)
        .eq('video_id', videoId)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå useVideoComments: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
        throw error;
      }

      console.log('‚úÖ useVideoComments: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', data);
      return data || [];
    },
    enabled: !!videoId,
  });
};

export const useAddVideoComment = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async ({ videoId, content }: { videoId: string; content: string }) => {
      console.log('üí¨ useAddVideoComment: –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', { videoId, content });

      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      const { data, error } = await supabase
        .from('video_comments')
        .insert({
          video_id: videoId,
          user_id: user.id,
          content: content.trim()
        })
        .select()
        .single();

      if (error) {
        console.error('‚ùå useAddVideoComment: –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
        throw error;
      }

      console.log('‚úÖ useAddVideoComment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω:', data);
      return data;
    },
    onSuccess: (_, variables) => {
      console.log('üîÑ useAddVideoComment: –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
      queryClient.invalidateQueries({ queryKey: ['video-comments', variables.videoId] });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤–∏–¥–µ–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
      queryClient.invalidateQueries({ queryKey: ['videos'] });
      queryClient.invalidateQueries({ queryKey: ['user-videos'] });
      queryClient.invalidateQueries({ queryKey: ['user-profile'] });
      
      toast.success('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω');
    },
    onError: (error) => {
      console.error('‚ùå useAddVideoComment: –û—à–∏–±–∫–∞ –º—É—Ç–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è');
    }
  });
};
