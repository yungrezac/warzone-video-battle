
import { useAuth } from '@/components/AuthWrapper';
import { supabase } from '@/integrations/supabase/client';
import { useTelegramNotifications } from './useTelegramNotifications';

export const useAchievementTriggers = () => {
  const { user } = useAuth();
  const { sendAchievementNotification } = useTelegramNotifications();

  const triggerLikeReceived = async (totalLikes: number) => {
    if (!user?.id) return;

    console.log('üîî –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ª–∞–π–∫–∏:', totalLikes);

    try {
      await supabase.rpc('update_achievement_progress', {
        p_user_id: user.id,
        p_category: 'likes_received',
        p_new_value: totalLikes
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–ª–∞–π–∫–∏):', error);
    }
  };

  const triggerViewsReceived = async (totalViews: number) => {
    if (!user?.id) return;

    console.log('üîî –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã:', totalViews);

    try {
      await supabase.rpc('update_achievement_progress', {
        p_user_id: user.id,
        p_category: 'views_received',
        p_new_value: totalViews
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–ø—Ä–æ—Å–º–æ—Ç—Ä—ã):', error);
    }
  };

  const triggerRatingReceived = async (totalRatings: number, averageRating: number) => {
    if (!user?.id) return;

    console.log('üîî –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥:', { totalRatings, averageRating });

    try {
      await supabase.rpc('update_achievement_progress', {
        p_user_id: user.id,
        p_category: 'ratings_received',
        p_new_value: totalRatings
      });

      if (averageRating >= 4.0) {
        await supabase.rpc('update_achievement_progress', {
          p_user_id: user.id,
          p_category: 'high_rating',
          p_new_value: Math.floor(averageRating * 10)
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (—Ä–µ–π—Ç–∏–Ω–≥):', error);
    }
  };

  const triggerVideoUploaded = async () => {
    if (!user?.id) return;

    console.log('üîî –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ');

    try {
      await supabase.rpc('update_achievement_progress', {
        p_user_id: user.id,
        p_category: 'videos_uploaded',
        p_increment: 1
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ):', error);
    }
  };

  const triggerDailyWin = async () => {
    if (!user?.id) return;

    console.log('üîî –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø–æ–±–µ–¥—É');

    try {
      await supabase.rpc('update_achievement_progress', {
        p_user_id: user.id,
        p_category: 'daily_wins',
        p_increment: 1
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–æ–±–µ–¥—ã):', error);
    }
  };

  const notifyAchievement = async (achievementTitle: string, achievementIcon: string, rewardPoints: number) => {
    if (!user?.id || !user.telegram_id) return;

    console.log('üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏:', achievementTitle);

    try {
      await sendAchievementNotification(
        user.id,
        user.telegram_id,
        achievementTitle,
        achievementIcon,
        rewardPoints
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏:', error);
    }
  };

  return {
    triggerLikeReceived,
    triggerViewsReceived,
    triggerRatingReceived,
    triggerVideoUploaded,
    triggerDailyWin,
    notifyAchievement,
  };
};
