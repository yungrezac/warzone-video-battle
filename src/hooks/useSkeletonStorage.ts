
import { useState, useEffect, useCallback } from 'react';
import { useTelegramWebApp } from './useTelegramWebApp';

interface SkeletonData {
  id: string;
  type: 'video' | 'profile' | 'market' | 'tournament';
  timestamp: number;
  data: any;
}

export const useSkeletonStorage = () => {
  const { webApp } = useTelegramWebApp();
  const [isStorageAvailable, setIsStorageAvailable] = useState(false);

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å DeviceStorage
    if (webApp?.DeviceStorage) {
      setIsStorageAvailable(true);
      console.log('‚úÖ DeviceStorage –¥–æ—Å—Ç—É–ø–µ–Ω');
    } else {
      console.log('‚ö†Ô∏è DeviceStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
    }
  }, [webApp]);

  const saveSkeletonData = useCallback((key: string, data: SkeletonData) => {
    return new Promise<boolean>((resolve) => {
      const serializedData = JSON.stringify(data);
      
      if (webApp?.DeviceStorage) {
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–µ–ª–µ—Ç–æ–Ω –≤ DeviceStorage:', key);
        webApp.DeviceStorage.setItem(key, serializedData, (error, success) => {
          if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ DeviceStorage:', error);
            // Fallback –∫ localStorage
            try {
              localStorage.setItem(`skeleton_${key}`, serializedData);
              resolve(true);
            } catch (e) {
              console.error('‚ùå –û—à–∏–±–∫–∞ fallback localStorage:', e);
              resolve(false);
            }
          } else {
            console.log('‚úÖ –°–∫–µ–ª–µ—Ç–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ DeviceStorage');
            resolve(success);
          }
        });
      } else {
        // Fallback –∫ localStorage
        try {
          localStorage.setItem(`skeleton_${key}`, serializedData);
          console.log('üíæ –°–∫–µ–ª–µ—Ç–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage (fallback)');
          resolve(true);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ localStorage fallback:', error);
          resolve(false);
        }
      }
    });
  }, [webApp]);

  const loadSkeletonData = useCallback((key: string): Promise<SkeletonData | null> => {
    return new Promise((resolve) => {
      if (webApp?.DeviceStorage) {
        console.log('üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫–µ–ª–µ—Ç–æ–Ω –∏–∑ DeviceStorage:', key);
        webApp.DeviceStorage.getItem(key, (error, value) => {
          if (error || !value) {
            console.log('‚ö†Ô∏è –°–∫–µ–ª–µ—Ç–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DeviceStorage, –ø—Ä–æ–±—É–µ–º localStorage');
            // Fallback –∫ localStorage
            try {
              const fallbackValue = localStorage.getItem(`skeleton_${key}`);
              if (fallbackValue) {
                const parsed = JSON.parse(fallbackValue);
                console.log('‚úÖ –°–∫–µ–ª–µ—Ç–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ localStorage (fallback)');
                resolve(parsed);
              } else {
                resolve(null);
              }
            } catch (e) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ fallback –¥–∞–Ω–Ω—ã—Ö:', e);
              resolve(null);
            }
          } else {
            try {
              const parsed = JSON.parse(value);
              console.log('‚úÖ –°–∫–µ–ª–µ—Ç–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ DeviceStorage');
              resolve(parsed);
            } catch (e) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ DeviceStorage –¥–∞–Ω–Ω—ã—Ö:', e);
              resolve(null);
            }
          }
        });
      } else {
        // Fallback –∫ localStorage
        try {
          const value = localStorage.getItem(`skeleton_${key}`);
          if (value) {
            const parsed = JSON.parse(value);
            console.log('üìñ –°–∫–µ–ª–µ—Ç–æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ localStorage (fallback)');
            resolve(parsed);
          } else {
            resolve(null);
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ localStorage fallback –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:', error);
          resolve(null);
        }
      }
    });
  }, [webApp]);

  const saveSecureData = useCallback((key: string, data: any) => {
    return new Promise<boolean>((resolve) => {
      const serializedData = JSON.stringify(data);
      
      if (webApp?.SecureStorage) {
        console.log('üîê –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ SecureStorage:', key);
        webApp.SecureStorage.setItem(key, serializedData, (error, success) => {
          if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ SecureStorage:', error);
            resolve(false);
          } else {
            console.log('‚úÖ –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ SecureStorage');
            resolve(success);
          }
        });
      } else {
        console.log('‚ö†Ô∏è SecureStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        resolve(false);
      }
    });
  }, [webApp]);

  const loadSecureData = useCallback((key: string): Promise<any | null> => {
    return new Promise((resolve) => {
      if (webApp?.SecureStorage) {
        console.log('üîê –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ SecureStorage:', key);
        webApp.SecureStorage.getItem(key, (error, value) => {
          if (error || !value) {
            console.log('‚ö†Ô∏è –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ SecureStorage');
            resolve(null);
          } else {
            try {
              const parsed = JSON.parse(value);
              console.log('‚úÖ –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ SecureStorage');
              resolve(parsed);
            } catch (e) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ SecureStorage –¥–∞–Ω–Ω—ã—Ö:', e);
              resolve(null);
            }
          }
        });
      } else {
        console.log('‚ö†Ô∏è SecureStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        resolve(null);
      }
    });
  }, [webApp]);

  const clearOldSkeletons = useCallback(() => {
    const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
    const now = Date.now();

    // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ localStorage, —Ç–∞–∫ –∫–∞–∫ DeviceStorage –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç getKeys
    console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–∫–µ–ª–µ—Ç–æ–Ω—ã –∏–∑ localStorage...');
    Object.keys(localStorage).forEach(key => {
      if (key.startsWith('skeleton_')) {
        try {
          const value = localStorage.getItem(key);
          if (value) {
            const data = JSON.parse(value);
            if (now - data.timestamp > maxAge) {
              console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å–∫–µ–ª–µ—Ç–æ–Ω –∏–∑ localStorage:', key);
              localStorage.removeItem(key);
            }
          }
        } catch (e) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–∫–µ–ª–µ—Ç–æ–Ω–∞ localStorage:', e);
          // –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          localStorage.removeItem(key);
        }
      }
    });
  }, []);

  return {
    isStorageAvailable,
    saveSkeletonData,
    loadSkeletonData,
    saveSecureData,
    loadSecureData,
    clearOldSkeletons,
  };
};
