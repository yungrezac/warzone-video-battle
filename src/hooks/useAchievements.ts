import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/components/AuthWrapper';
import { useEffect } from 'react';

export interface Achievement {
  id: string;
  title: string;
  description: string;
  icon: string;
  category: string;
  target_value: number;
  reward_points: number;
  is_active: boolean;
  created_at: string;
}

export interface UserAchievement {
  id: string;
  user_id: string;
  achievement_id: string;
  current_progress: number;
  is_completed: boolean;
  completed_at: string | null;
  created_at: string;
  updated_at: string;
  achievement: Achievement;
}

export const useAchievements = () => {
  const queryClient = useQueryClient();
  const queryKey = ['achievements'];

  useEffect(() => {
    const channel = supabase
      .channel('achievements-changes')
      .on('postgres_changes', { event: '*', schema: 'public', table: 'achievements' }, () => {
        queryClient.invalidateQueries({ queryKey: ['achievements'] });
      })
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, [queryClient]);

  return useQuery({
    queryKey,
    queryFn: async () => {
      console.log('üèÜ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è...');
      
      const { data, error } = await supabase
        .from('achievements')
        .select('*')
        .eq('is_active', true)
        .order('category', { ascending: true })
        .order('target_value', { ascending: true });

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
        throw error;
      }
      
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', data?.length || 0);
      return data as Achievement[];
    },
  });
};

export const useUserAchievements = () => {
  const { user } = useAuth();
  const queryClient = useQueryClient();
  const userId = user?.id;
  const queryKey = ['user-achievements', userId];

  useEffect(() => {
    if (!userId) return;

    const channel = supabase
      .channel(`user-achievements-changes-${userId}`)
      .on('postgres_changes', { event: '*', schema: 'public', table: 'user_achievements', filter: `user_id=eq.${userId}` }, () => {
        queryClient.invalidateQueries({ queryKey: ['user-achievements', userId] });
      })
      .on('postgres_changes', { event: '*', schema: 'public', table: 'achievements' }, () => {
        queryClient.invalidateQueries({ queryKey: ['user-achievements', userId] });
      })
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, [queryClient, userId]);

  return useQuery({
    queryKey,
    queryFn: async () => {
      if (!user?.id) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
        throw new Error('User not authenticated');
      }

      console.log('üèÜ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id);

      try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        const { data: allAchievements, error: achievementsError } = await supabase
          .from('achievements')
          .select('*')
          .eq('is_active', true)
          .order('category', { ascending: true })
          .order('target_value', { ascending: true });

        if (achievementsError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', achievementsError);
          throw achievementsError;
        }

        console.log('üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', allAchievements?.length || 0);

        if (!allAchievements || allAchievements.length === 0) {
          console.log('‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ');
          return [];
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
        const { data: userProgress, error: progressError } = await supabase
          .from('user_achievements')
          .select('*')
          .eq('user_id', user.id);

        if (progressError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', progressError);
          throw progressError;
        }

        console.log('üìà –ó–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userProgress?.length || 0);

        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        const progressMap = new Map();
        userProgress?.forEach(up => {
          progressMap.set(up.achievement_id, up);
        });

        // –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const missingProgressAchievements = allAchievements.filter(achievement => 
          !progressMap.has(achievement.id)
        );

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        if (missingProgressAchievements.length > 0) {
          console.log('‚ûï –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', missingProgressAchievements.length);
          
          const newProgressRecords = missingProgressAchievements.map(achievement => ({
            user_id: user.id,
            achievement_id: achievement.id,
            current_progress: 0,
            is_completed: false,
          }));

          const { data: createdProgress, error: createError } = await supabase
            .from('user_achievements')
            .insert(newProgressRecords)
            .select('*');

          if (createError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', createError);
            // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          } else {
            console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', createdProgress?.length || 0);
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –∫ –∫–∞—Ä—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            createdProgress?.forEach(cp => {
              progressMap.set(cp.achievement_id, cp);
            });
          }
        }

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ - –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        const result: UserAchievement[] = allAchievements.map(achievement => {
          const userProgress = progressMap.get(achievement.id);
          
          if (!userProgress) {
            // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –≤—Å—ë –µ—â—ë –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
            console.warn('‚ö†Ô∏è –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', achievement.title);
            return {
              id: `virtual-${achievement.id}`,
              user_id: user.id,
              achievement_id: achievement.id,
              current_progress: 0,
              is_completed: false,
              completed_at: null,
              created_at: new Date().toISOString(),
              updated_at: new Date().toISOString(),
              achievement: achievement,
            };
          }

          return {
            ...userProgress,
            achievement: achievement,
          };
        });

        console.log('üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', result.length, '–∑–∞–ø–∏—Å–µ–π');
        console.log('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', result.filter(r => r.is_completed).length);
        
        return result;

      } catch (error) {
        console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        throw error;
      }
    },
    enabled: !!user?.id,
    retry: 3,
    retryDelay: attemptIndex => Math.min(1000 * 2 ** attemptIndex, 30000),
  });
};

export const useUpdateAchievementProgress = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async ({ 
      category, 
      newValue, 
      increment = 1 
    }: { 
      category: string; 
      newValue?: number; 
      increment?: number; 
    }) => {
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', {
        category,
        newValue,
        increment
      });

      const { data: user } = await supabase.auth.getUser();
      
      if (!user.user?.id) {
        console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
        throw new Error('User not authenticated');
      }

      try {
        const { error } = await supabase.rpc('update_achievement_progress', {
          p_user_id: user.user.id,
          p_category: category,
          p_new_value: newValue || null,
          p_increment: increment,
        });

        if (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
          throw error;
        }

        console.log('‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', category);
        return { success: true };

      } catch (error) {
        console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
        throw error;
      }
    },
    onSuccess: (data, variables) => {
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', variables.category);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      queryClient.invalidateQueries({ queryKey: ['user-achievements'] });
      queryClient.invalidateQueries({ queryKey: ['user-profile'] });
      queryClient.invalidateQueries({ queryKey: ['achievement-stats'] });
    },
    onError: (error, variables) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –º—É—Ç–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', variables.category, error);
    },
  });
};

export const useAchievementStats = () => {
  const { user } = useAuth();

  return useQuery({
    queryKey: ['achievement-stats', user?.id],
    queryFn: async () => {
      if (!user?.id) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π');
        throw new Error('User not authenticated');
      }

      console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.id);

      try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        const { data: allAchievements, error: achievementsError } = await supabase
          .from('achievements')
          .select('id')
          .eq('is_active', true);

        if (achievementsError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', achievementsError);
          throw achievementsError;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: completedAchievements, error: completedError } = await supabase
          .from('user_achievements')
          .select('id')
          .eq('user_id', user.id)
          .eq('is_completed', true);

        if (completedError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', completedError);
          throw completedError;
        }

        const total = allAchievements?.length || 0;
        const completed = completedAchievements?.length || 0;
        const remaining = total - completed;
        const completionRate = total > 0 ? Math.round((completed / total) * 100) : 0;

        const stats = {
          total,
          completed,
          remaining,
          completionRate,
        };

        console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', stats);
        return stats;

      } catch (error) {
        console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
        throw error;
      }
    },
    enabled: !!user?.id,
    retry: 2,
    retryDelay: 1000,
  });
};
