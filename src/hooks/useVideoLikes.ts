
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';

export const useLikeVideo = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async ({ videoId, isLiked }: { videoId: string; isLiked: boolean }) => {
      console.log('üéØ useLikeVideo: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∞–π–∫', { videoId, isLiked });

      const { data: { user } } = await supabase.auth.getUser();
      
      if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      if (isLiked) {
        // –£–±–∏—Ä–∞–µ–º –ª–∞–π–∫
        console.log('üì§ useLikeVideo: –£–±–∏—Ä–∞–µ–º –ª–∞–π–∫');
        const { error } = await supabase
          .from('video_likes')
          .delete()
          .eq('video_id', videoId)
          .eq('user_id', user.id);

        if (error) {
          console.error('‚ùå useLikeVideo: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞:', error);
          throw error;
        }
      } else {
        // –°—Ç–∞–≤–∏–º –ª–∞–π–∫
        console.log('üíñ useLikeVideo: –°—Ç–∞–≤–∏–º –ª–∞–π–∫');
        const { error } = await supabase
          .from('video_likes')
          .insert({
            video_id: videoId,
            user_id: user.id
          });

        if (error) {
          console.error('‚ùå useLikeVideo: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ª–∞–π–∫–∞:', error);
          throw error;
        }
      }

      console.log('‚úÖ useLikeVideo: –õ–∞–π–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω');
      return { videoId, isLiked: !isLiked };
    },
    onSuccess: (data) => {
      console.log('üîÑ useLikeVideo: –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–∞–π–∫–∞');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –≤–∏–¥–µ–æ
      queryClient.invalidateQueries({ queryKey: ['videos'] });
      queryClient.invalidateQueries({ queryKey: ['user-videos'] });
      queryClient.invalidateQueries({ queryKey: ['user-profile'] });
      
      // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      queryClient.invalidateQueries({ queryKey: ['other-user-profile'] });
    },
    onError: (error) => {
      console.error('‚ùå useLikeVideo: –û—à–∏–±–∫–∞ –º—É—Ç–∞—Ü–∏–∏ –ª–∞–π–∫–∞:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∞–π–∫–∞');
    }
  });
};
