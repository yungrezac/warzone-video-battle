
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/components/AuthWrapper';
import { useTelegramNotifications } from './useTelegramNotifications';

export const useLikeVideo = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const { sendLikeNotification } = useTelegramNotifications();

  return useMutation({
    mutationFn: async ({ videoId, isLiked }: { videoId: string; isLiked: boolean }) => {
      if (!user?.id) {
        throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }

      console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∞–π–∫:', { videoId, isLiked, userId: user.id });

      if (isLiked) {
        // –£–±–∏—Ä–∞–µ–º –ª–∞–π–∫
        console.log('‚ùå –£–±–∏—Ä–∞–µ–º –ª–∞–π–∫...');
        const { error } = await supabase
          .from('video_likes')
          .delete()
          .eq('video_id', videoId)
          .eq('user_id', user.id);

        if (error) throw error;

        // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        await supabase.rpc('decrement_likes_count', { video_id: videoId });
        console.log('‚úÖ –õ–∞–π–∫ —É–±—Ä–∞–Ω, —Å—á–µ—Ç—á–∏–∫ —É–º–µ–Ω—å—à–µ–Ω');
      } else {
        // –°—Ç–∞–≤–∏–º –ª–∞–π–∫
        console.log('‚ù§Ô∏è –°—Ç–∞–≤–∏–º –ª–∞–π–∫...');
        const { error } = await supabase
          .from('video_likes')
          .insert({
            video_id: videoId,
            user_id: user.id,
          });

        if (error) throw error;

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        await supabase.rpc('increment_likes_count', { video_id: videoId });
        console.log('‚úÖ –õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω, —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –≤–∏–¥–µ–æ
        try {
          const { data: videoData } = await supabase
            .from('videos')
            .select(`
              title,
              user_id,
              profiles!inner(telegram_id, username, telegram_username)
            `)
            .eq('id', videoId)
            .single();

          if (videoData && videoData.profiles && videoData.user_id !== user.id) {
            const ownerTelegramId = videoData.profiles.telegram_id;
            const likerName = user.username || user.telegram_username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            
            if (ownerTelegramId) {
              await sendLikeNotification(
                videoData.user_id,
                ownerTelegramId,
                likerName,
                videoData.title
              );
            }
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∞–π–∫–µ:', error);
        }
      }

      const newIsLiked = !isLiked;
      console.log('üèÅ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –ª–∞–π–∫–∞. –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', newIsLiked);
      return { videoId, isLiked: newIsLiked };
    },
    onSuccess: (data) => {
      console.log('‚úÖ –ú—É—Ç–∞—Ü–∏—è –ª–∞–π–∫–∞ —É—Å–ø–µ—à–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∑–∞–ø—Ä–æ—Å–æ–≤...');
      queryClient.invalidateQueries({ queryKey: ['videos'] });
      queryClient.invalidateQueries({ queryKey: ['user-videos'] });
    },
    onError: (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∞–π–∫–∞:', error);
    },
  });
};
