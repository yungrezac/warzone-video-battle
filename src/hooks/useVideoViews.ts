
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';

export const useVideoViews = () => {
  const queryClient = useQueryClient();

  const markVideoAsViewed = async (videoId: string) => {
    try {
      console.log('üé¨ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –¥–ª—è –≤–∏–¥–µ–æ:', videoId);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
      const { data: currentVideo, error: fetchError } = await supabase
        .from('videos')
        .select('views')
        .eq('id', videoId)
        .single();

      if (fetchError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–¥–µ–æ:', fetchError);
        return;
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ 1
      const newViewsCount = (currentVideo.views || 0) + 1;
      console.log('üìä –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Å', currentVideo.views, '–¥–æ', newViewsCount);
      
      const { error } = await supabase
        .from('videos')
        .update({ views: newViewsCount })
        .eq('id', videoId);

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:', error);
        return;
      }

      console.log('‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—Å—á–∏—Ç–∞–Ω –¥–ª—è –≤–∏–¥–µ–æ:', videoId);
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –±–∞–ª–ª–æ–≤
      queryClient.invalidateQueries({ queryKey: ['videos'] });
      queryClient.invalidateQueries({ queryKey: ['user-videos'] });
      queryClient.invalidateQueries({ queryKey: ['user-profile'] });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', error);
    }
  };

  return { markVideoAsViewed };
};

export const useIncrementVideoViews = () => {
  const { markVideoAsViewed } = useVideoViews();
  
  return useMutation({
    mutationFn: markVideoAsViewed,
    onError: (error) => {
      console.error('–û—à–∏–±–∫–∞ –º—É—Ç–∞—Ü–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:', error);
    },
  });
};
