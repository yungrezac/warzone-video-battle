
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/components/AuthWrapper';

export const useLikePost = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();

  return useMutation({
    mutationFn: async ({ postId, isLiked }: { postId: string; isLiked: boolean }) => {
      if (!user?.id) {
        throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }

      console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∞–π–∫ –ø–æ—Å—Ç–∞:', { postId, isLiked, userId: user.id });

      if (isLiked) {
        // –£–±–∏—Ä–∞–µ–º –ª–∞–π–∫
        console.log('‚ùå –£–±–∏—Ä–∞–µ–º –ª–∞–π–∫ —Å –ø–æ—Å—Ç–∞...');
        const { error } = await supabase
          .from('post_likes')
          .delete()
          .eq('post_id', postId)
          .eq('user_id', user.id);

        if (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞ —Å –ø–æ—Å—Ç–∞:', error);
          throw error;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤
        const { error: updateError } = await supabase
          .from('posts')
          .update({ 
            likes_count: supabase.raw('GREATEST(COALESCE(likes_count, 0) - 1, 0)') 
          })
          .eq('id', postId);

        if (updateError) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –ª–∞–π–∫–æ–≤ –ø–æ—Å—Ç–∞:', updateError);
        }

        console.log('‚úÖ –õ–∞–π–∫ —Å –ø–æ—Å—Ç–∞ —É–±—Ä–∞–Ω');
      } else {
        // –°—Ç–∞–≤–∏–º –ª–∞–π–∫
        console.log('‚ù§Ô∏è –°—Ç–∞–≤–∏–º –ª–∞–π–∫ –ø–æ—Å—Ç—É...');
        const { error } = await supabase
          .from('post_likes')
          .insert({
            post_id: postId,
            user_id: user.id,
          });

        if (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞ –ø–æ—Å—Ç—É:', error);
          throw error;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤
        const { error: updateError } = await supabase
          .from('posts')
          .update({ 
            likes_count: supabase.raw('COALESCE(likes_count, 0) + 1') 
          })
          .eq('id', postId);

        if (updateError) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞ –ª–∞–π–∫–æ–≤ –ø–æ—Å—Ç–∞:', updateError);
        }

        console.log('‚úÖ –õ–∞–π–∫ –ø–æ—Å—Ç—É –ø–æ—Å—Ç–∞–≤–ª–µ–Ω');
      }

      const newIsLiked = !isLiked;
      console.log('üèÅ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –ª–∞–π–∫–∞ –ø–æ—Å—Ç–∞. –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', newIsLiked);
      return { postId, isLiked: newIsLiked };
    },
    onSuccess: (data) => {
      console.log('‚úÖ –ú—É—Ç–∞—Ü–∏—è –ª–∞–π–∫–∞ –ø–æ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∑–∞–ø—Ä–æ—Å–æ–≤...');
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫—ç—à–∏
      queryClient.invalidateQueries({ queryKey: ['posts'] });
      queryClient.invalidateQueries({ queryKey: ['user-posts'] });
      queryClient.invalidateQueries({ queryKey: ['user-profile'] });
    },
    onError: (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∞–π–∫–∞ –ø–æ—Å—Ç–∞:', error);
    },
  });
};
