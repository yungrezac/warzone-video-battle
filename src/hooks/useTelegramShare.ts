
import { useCallback } from 'react';
import { useTelegramWebApp } from './useTelegramWebApp';

export const useTelegramShare = () => {
  const { webApp, isTelegramWebApp, hapticFeedback } = useTelegramWebApp();

  const shareVideo = useCallback((videoUrl: string, title: string, description?: string) => {
    if (!isTelegramWebApp || !webApp) {
      // Fallback –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏
      if (navigator.share) {
        navigator.share({
          title: `TRICKS: ${title}`,
          text: description || '–ü–æ—Å–º–æ—Ç—Ä–∏ —ç—Ç–æ—Ç –∫—Ä—É—Ç–æ–π —Ç—Ä—é–∫!',
          url: videoUrl,
        });
      } else {
        navigator.clipboard.writeText(videoUrl);
      }
      return;
    }

    hapticFeedback('selection');
    
    const shareText = `üé¨ ${title}\n\n${description || '–ü–æ—Å–º–æ—Ç—Ä–∏ —ç—Ç–æ—Ç –∫—Ä—É—Ç–æ–π —Ç—Ä—é–∫ –≤ TRICKS!'}\n\n${videoUrl}`;
    
    webApp.switchInlineQuery(shareText, ['users', 'groups']);
  }, [webApp, isTelegramWebApp, hapticFeedback]);

  const shareToStory = useCallback((mediaUrl: string, text?: string, widgetUrl?: string) => {
    if (!isTelegramWebApp || !webApp?.shareToStory) {
      console.warn('Story sharing –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
      return;
    }

    hapticFeedback('impact');
    
    webApp.shareToStory(mediaUrl, {
      text: text || '–°–º–æ—Ç—Ä–∏ –º–æ–∏ —Ç—Ä—é–∫–∏ –≤ TRICKS!',
      widget_link: widgetUrl ? {
        url: widgetUrl,
        name: 'TRICKS'
      } : undefined
    });
  }, [webApp, isTelegramWebApp, hapticFeedback]);

  const shareProfile = useCallback((username: string, userId: string) => {
    const profileUrl = `${window.location.origin}?start_param=profile_${userId}`;
    const shareText = `üë§ –ü—Ä–æ—Ñ–∏–ª—å ${username} –≤ TRICKS\n\n–ü–æ—Å–º–æ—Ç—Ä–∏ –µ–≥–æ –∫—Ä—É—Ç—ã–µ —Ç—Ä—é–∫–∏!\n\n${profileUrl}`;
    
    if (isTelegramWebApp && webApp) {
      hapticFeedback('selection');
      webApp.switchInlineQuery(shareText);
    } else {
      navigator.clipboard.writeText(profileUrl);
    }
  }, [webApp, isTelegramWebApp, hapticFeedback]);

  return {
    shareVideo,
    shareToStory,
    shareProfile,
    isAvailable: isTelegramWebApp && !!webApp,
  };
};
