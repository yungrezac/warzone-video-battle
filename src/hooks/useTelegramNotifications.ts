
import { supabase } from '@/integrations/supabase/client';
import { formatPoints } from '@/lib/utils';

export const useTelegramNotifications = () => {
  const checkNotificationSettings = async (userId: string, notificationType: 'likes' | 'comments' | 'achievements' | 'winners' | 'system' | 'new_video' | 'new_subscriber') => {
    try {
      const { data, error } = await supabase
        .from('notification_settings')
        .select('*')
        .eq('user_id', userId)
        .maybeSingle();

      if (error && error.code !== 'PGRST116') {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
        return true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
      }

      if (!data) {
        return true; // –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
      }

      switch (notificationType) {
        case 'likes':
          return data.likes_notifications;
        case 'comments':
          return data.comments_notifications;
        case 'achievements':
          return data.achievements_notifications;
        case 'winners':
          return data.winners_notifications;
        case 'new_video':
          return data.new_video_notifications;
        case 'new_subscriber':
          return data.new_subscriber_notifications;
        case 'system':
          return data.system_notifications;
        default:
          return true;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      return true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
    }
  };

  const sendNotification = async (
    telegramId: string, 
    message: string, 
    type: 'like' | 'comment' | 'achievement' | 'daily_winner' | 'comment_like' | 'comment_reply' | 'new_video' | 'new_subscriber'
  ) => {
    try {
      console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}:`, message);
      
      const { data, error } = await supabase.functions.invoke('send-telegram-notification', {
        body: {
          telegramId,
          message,
          type,
        },
      });

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
        throw error;
      }

      console.log('Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:', data);
      return data;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
      throw error;
    }
  };

  const sendLikeNotification = async (videoOwnerId: string, videoOwnerTelegramId: string, likerName: string, videoTitle: string) => {
    const isEnabled = await checkNotificationSettings(videoOwnerId, 'likes');
    if (!isEnabled) {
      console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∞–π–∫–∞—Ö –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', videoOwnerId);
      return;
    }

    const message = `‚ù§Ô∏è <b>${likerName}</b> –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫ –≤–∞—à–µ–º—É –≤–∏–¥–µ–æ "<b>${videoTitle}</b>"!`;
    return sendNotification(videoOwnerTelegramId, message, 'like');
  };

  const sendCommentNotification = async (videoOwnerId: string, videoOwnerTelegramId: string, commenterName: string, videoTitle: string, comment: string) => {
    const isEnabled = await checkNotificationSettings(videoOwnerId, 'comments');
    if (!isEnabled) {
      console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', videoOwnerId);
      return;
    }

    const shortComment = comment.length > 50 ? comment.substring(0, 50) + '...' : comment;
    const message = `üí¨ <b>${commenterName}</b> –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–º—É –≤–∏–¥–µ–æ "<b>${videoTitle}</b>":\n\n"${shortComment}"`;
    return sendNotification(videoOwnerTelegramId, message, 'comment');
  };

  const sendCommentLikeNotification = async (
    commentOwnerId: string, 
    commentOwnerTelegramId: string, 
    likerName: string, 
    commentContent: string
  ) => {
    const isEnabled = await checkNotificationSettings(commentOwnerId, 'likes');
    if (!isEnabled) {
      console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∞–π–∫–∞—Ö (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤) –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', commentOwnerId);
      return;
    }

    const shortComment = commentContent.length > 50 ? commentContent.substring(0, 50) + '...' : commentContent;
    const message = `üëç <b>${likerName}</b> –æ—Ü–µ–Ω–∏–ª(–∞) –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n\n"<i>${shortComment}</i>"`;
    return sendNotification(commentOwnerTelegramId, message, 'comment_like');
  };

  const sendCommentReplyNotification = async (
    parentCommentOwnerId: string, 
    parentCommentOwnerTelegramId: string, 
    replierName: string, 
    replyContent: string,
    videoTitle: string
  ) => {
    const isEnabled = await checkNotificationSettings(parentCommentOwnerId, 'comments');
    if (!isEnabled) {
      console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', parentCommentOwnerId);
      return;
    }

    const shortReply = replyContent.length > 50 ? replyContent.substring(0, 50) + '...' : replyContent;
    const message = `üí¨ <b>${replierName}</b> –æ—Ç–≤–µ—Ç–∏–ª(–∞) –Ω–∞ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∏–¥–µ–æ "<b>${videoTitle}</b>":\n\n"<i>${shortReply}</i>"`;
    return sendNotification(parentCommentOwnerTelegramId, message, 'comment_reply');
  };

  const sendAchievementNotification = async (userId: string, userTelegramId: string, achievementTitle: string, achievementIcon: string, rewardPoints: number) => {
    const isEnabled = await checkNotificationSettings(userId, 'achievements');
    if (!isEnabled) {
      console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', userId);
      return;
    }

    const message = `üèÜ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ:\n${achievementIcon} <b>${achievementTitle}</b>\n\n+${rewardPoints} –±–∞–ª–ª–æ–≤!`;
    return sendNotification(userTelegramId, message, 'achievement');
  };

  const sendNewVideoNotification = async (followerId: string, followerTelegramId: string, authorName: string, videoTitle: string) => {
    const isEnabled = await checkNotificationSettings(followerId, 'new_video');
    if (!isEnabled) {
      console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', followerId);
      return;
    }
    const message = `üé¨ <b>${authorName}</b> –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª(–∞) –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ: "<b>${videoTitle}</b>"`;
    return sendNotification(followerTelegramId, message, 'new_video');
  };

  const sendNewSubscriberNotification = async (subscribedToUserId: string, subscribedToUserTelegramId: string, subscriberName: string) => {
    const isEnabled = await checkNotificationSettings(subscribedToUserId, 'new_subscriber');
    if (!isEnabled) {
      console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', subscribedToUserId);
      return;
    }
    const message = `üëã –ù–∞ –≤–∞—Å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>${subscriberName}</b>`;
    return sendNotification(subscribedToUserTelegramId, message, 'new_subscriber');
  };

  const sendDailyWinnerNotification = async (winnerId: string, winnerTelegramId: string, videoTitle: string, totalPoints: number) => {
    const isEnabled = await checkNotificationSettings(winnerId, 'winners');
    if (!isEnabled) {
      console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–±–µ–¥–∞—Ö –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', winnerId);
      return;
    }
    const message = `üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å—Ç–∞–ª–∏ <b>–ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –¥–Ω—è</b> —Å –≤–∏–¥–µ–æ "<b>${videoTitle}</b>" –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ <b>${formatPoints(totalPoints)}</b> <i class="font-bold balance-icon">–ë</i>!`;
    return sendNotification(winnerTelegramId, message, 'daily_winner');
  };

  return {
    sendLikeNotification,
    sendCommentNotification,
    sendAchievementNotification,
    sendDailyWinnerNotification,
    sendCommentLikeNotification,
    sendCommentReplyNotification,
    sendNewVideoNotification,
    sendNewSubscriberNotification,
  };
};
