
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/components/AuthWrapper';
import { compressVideo, shouldCompress, generateQuickThumbnail } from '@/utils/videoOptimization';

interface OptimizedUploadParams {
  title: string;
  description?: string;
  videoFile: File;
  category: 'Rollers' | 'BMX' | 'Skateboard';
  onProgress?: (progress: number) => void;
}

// –£–ª—å—Ç—Ä–∞–±—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
const uploadFileOptimized = async (
  file: File,
  fileName: string,
  onProgress?: (progress: number) => void
): Promise<string> => {
  console.log(`‚ö° –ù–∞—á–∏–Ω–∞–µ–º —É–ª—å—Ç—Ä–∞–±—ã—Å—Ç—Ä—É—é –∑–∞–≥—Ä—É–∑–∫—É: ${(file.size / 1024).toFixed(0)}KB`);
  
  // –ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
  const { data, error } = await supabase.storage
    .from('videos')
    .upload(fileName, file, {
      cacheControl: '3600',
      upsert: false,
    });

  if (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`);
  }

  // –ë—ã—Å—Ç—Ä–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  if (onProgress) {
    for (let i = 10; i <= 100; i += 15) {
      onProgress(i);
      await new Promise(resolve => setTimeout(resolve, 50));
    }
  }

  const { data: urlData } = supabase.storage
    .from('videos')
    .getPublicUrl(fileName);
    
  return urlData.publicUrl;
};

export const useOptimizedVideoUpload = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();

  return useMutation({
    mutationFn: async (params: OptimizedUploadParams) => {
      if (!user?.id) {
        throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }

      const { title, description, videoFile, category, onProgress } = params;
      
      console.log('‚ö° –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä—É—é –∑–∞–≥—Ä—É–∑–∫—É:', {
        userId: user.id,
        title,
        category,
        originalSize: `${(videoFile.size / 1024 / 1024).toFixed(2)}MB`
      });

      onProgress?.(2);

      let finalVideoFile = videoFile;
      let thumbnailPromise: Promise<Blob | null> = Promise.resolve(null);
      
      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∂–∞—Ç–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–≤—å—é
      if (shouldCompress(videoFile)) {
        console.log('üöÄ –°–∂–∏–º–∞–µ–º –≤–∏–¥–µ–æ –¥–ª—è —É–ª—å—Ç—Ä–∞-—Å–∫–æ—Ä–æ—Å—Ç–∏...');
        try {
          const [compressedFile, thumbnail] = await Promise.all([
            compressVideo(videoFile, 0.5), // –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–∂–∞—Ç–∏–µ
            generateQuickThumbnail(videoFile).catch(() => null)
          ]);
          
          finalVideoFile = compressedFile;
          thumbnailPromise = Promise.resolve(thumbnail);
          console.log(`‚úÖ –°–∂–∞—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${(finalVideoFile.size / 1024 / 1024).toFixed(2)}MB`);
        } catch (error) {
          console.warn('‚ö†Ô∏è –°–∂–∞—Ç–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª:', error);
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–≤—å—é –±–µ–∑ —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ
          thumbnailPromise = generateQuickThumbnail(videoFile).catch(() => null);
        }
      } else {
        // –î–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–≤—å—é
        thumbnailPromise = generateQuickThumbnail(videoFile).catch(() => null);
      }

      onProgress?.(15);

      const videoFileName = `${user.id}/${Date.now()}_optimized.webm`;
      
      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ
        console.log('üìπ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏...');
        const videoUrl = await uploadFileOptimized(finalVideoFile, videoFileName, (progress) => {
          onProgress?.(15 + (progress * 0.6)); // 15-75%
        });

        onProgress?.(75);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        let thumbnailUrl = null;
        try {
          const thumbnailBlob = await thumbnailPromise;
          if (thumbnailBlob) {
            console.log('üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–≤—å—é...');
            const thumbnailFileName = `${user.id}/${Date.now()}_thumb.jpg`;
            const { data: thumbnailUpload, error: thumbnailError } = await supabase.storage
              .from('videos')
              .upload(thumbnailFileName, thumbnailBlob, {
                cacheControl: '3600',
                upsert: false,
              });

            if (!thumbnailError) {
              const { data: thumbnailUrlData } = supabase.storage
                .from('videos')
                .getPublicUrl(thumbnailFileName);
              thumbnailUrl = thumbnailUrlData.publicUrl;
            }
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–≤—å—é (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):', error);
        }

        onProgress?.(85);

        // –ë—ã—Å—Ç—Ä–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
        const { data: videoRecord, error: dbError } = await supabase
          .from('videos')
          .insert({
            title,
            description,
            video_url: videoUrl,
            thumbnail_url: thumbnailUrl,
            user_id: user.id,
            category,
            views: 0,
            likes_count: 0,
            comments_count: 0,
          })
          .select()
          .single();

        if (dbError) {
          throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${dbError.message}`);
        }

        onProgress?.(95);

        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º UI)
        supabase.rpc('update_achievement_progress', { 
          p_user_id: user.id,
          p_category: 'videos_uploaded',
          p_increment: 1
        }).catch(error => console.warn('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error));

        onProgress?.(100);

        console.log('üéâ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        return videoRecord;
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        
        // –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try {
          await supabase.storage.from('videos').remove([videoFileName]);
        } catch (cleanupError) {
          console.warn('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤:', cleanupError);
        }
        
        throw error;
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['videos'] });
      queryClient.invalidateQueries({ queryKey: ['user-videos'] });
    },
    onError: (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º—É—Ç–∞—Ü–∏–∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:', error);
    },
  });
};
